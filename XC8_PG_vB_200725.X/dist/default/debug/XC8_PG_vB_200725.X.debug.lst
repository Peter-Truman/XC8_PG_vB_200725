

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Mon Jul 21 16:20:26 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=3
    21                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=3
    24                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1,group=3
    25                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1,group=3
    26                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1,group=2
    27                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1,group=2
    28                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    40   000000                     
    41                           ; Generated 24/03/2025 GMT
    42                           ; 
    43                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution. Publication is not required when
    57                           ;        this file is used in an embedded application.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F25K22 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75   000FE0                     bsr             equ	4064
    76   000FE9                     fsr0            equ	4073
    77   000FEA                     fsr0h           equ	4074
    78   000FE9                     fsr0l           equ	4073
    79   000FE1                     fsr1            equ	4065
    80   000FE2                     fsr1h           equ	4066
    81   000FE1                     fsr1l           equ	4065
    82   000FD9                     fsr2            equ	4057
    83   000FDA                     fsr2h           equ	4058
    84   000FD9                     fsr2l           equ	4057
    85   000FEF                     indf0           equ	4079
    86   000FE7                     indf1           equ	4071
    87   000FDF                     indf2           equ	4063
    88   000FF2                     intcon          equ	4082
    89   000000                     nvmcon          equ	0
    90   000FF9                     pcl             equ	4089
    91   000FFA                     pclath          equ	4090
    92   000FFB                     pclatu          equ	4091
    93   000FEB                     plusw0          equ	4075
    94   000FE3                     plusw1          equ	4067
    95   000FDB                     plusw2          equ	4059
    96   000FED                     postdec0        equ	4077
    97   000FE5                     postdec1        equ	4069
    98   000FDD                     postdec2        equ	4061
    99   000FEE                     postinc0        equ	4078
   100   000FE6                     postinc1        equ	4070
   101   000FDE                     postinc2        equ	4062
   102   000FEC                     preinc0         equ	4076
   103   000FE4                     preinc1         equ	4068
   104   000FDC                     preinc2         equ	4060
   105   000FF3                     prod            equ	4083
   106   000FF4                     prodh           equ	4084
   107   000FF3                     prodl           equ	4083
   108   000FD8                     status          equ	4056
   109   000FF5                     tablat          equ	4085
   110   000FF6                     tblptr          equ	4086
   111   000FF7                     tblptrh         equ	4087
   112   000FF6                     tblptrl         equ	4086
   113   000FF8                     tblptru         equ	4088
   114   000FFD                     tosl            equ	4093
   115   000FE8                     wreg            equ	4072
   116   000F38                     ANSELA          equ	3896	;# 
   117   000F39                     ANSELB          equ	3897	;# 
   118   000F3A                     ANSELC          equ	3898	;# 
   119   000F3D                     PMD2            equ	3901	;# 
   120   000F3E                     PMD1            equ	3902	;# 
   121   000F3F                     PMD0            equ	3903	;# 
   122   000F40                     VREFCON2        equ	3904	;# 
   123   000F40                     DACCON1         equ	3904	;# 
   124   000F41                     VREFCON1        equ	3905	;# 
   125   000F41                     DACCON0         equ	3905	;# 
   126   000F42                     VREFCON0        equ	3906	;# 
   127   000F42                     FVRCON          equ	3906	;# 
   128   000F43                     CTMUICON        equ	3907	;# 
   129   000F43                     CTMUICONH       equ	3907	;# 
   130   000F44                     CTMUCONL        equ	3908	;# 
   131   000F44                     CTMUCON1        equ	3908	;# 
   132   000F45                     CTMUCONH        equ	3909	;# 
   133   000F45                     CTMUCON0        equ	3909	;# 
   134   000F46                     SRCON1          equ	3910	;# 
   135   000F47                     SRCON0          equ	3911	;# 
   136   000F48                     CCPTMRS1        equ	3912	;# 
   137   000F49                     CCPTMRS0        equ	3913	;# 
   138   000F4A                     T6CON           equ	3914	;# 
   139   000F4B                     PR6             equ	3915	;# 
   140   000F4C                     TMR6            equ	3916	;# 
   141   000F4D                     T5GCON          equ	3917	;# 
   142   000F4E                     T5CON           equ	3918	;# 
   143   000F4F                     TMR5            equ	3919	;# 
   144   000F4F                     TMR5L           equ	3919	;# 
   145   000F50                     TMR5H           equ	3920	;# 
   146   000F51                     T4CON           equ	3921	;# 
   147   000F52                     PR4             equ	3922	;# 
   148   000F53                     TMR4            equ	3923	;# 
   149   000F54                     CCP5CON         equ	3924	;# 
   150   000F55                     CCPR5           equ	3925	;# 
   151   000F55                     CCPR5L          equ	3925	;# 
   152   000F56                     CCPR5H          equ	3926	;# 
   153   000F57                     CCP4CON         equ	3927	;# 
   154   000F58                     CCPR4           equ	3928	;# 
   155   000F58                     CCPR4L          equ	3928	;# 
   156   000F59                     CCPR4H          equ	3929	;# 
   157   000F5A                     PSTR3CON        equ	3930	;# 
   158   000F5B                     ECCP3AS         equ	3931	;# 
   159   000F5B                     CCP3AS          equ	3931	;# 
   160   000F5C                     PWM3CON         equ	3932	;# 
   161   000F5D                     CCP3CON         equ	3933	;# 
   162   000F5E                     CCPR3           equ	3934	;# 
   163   000F5E                     CCPR3L          equ	3934	;# 
   164   000F5F                     CCPR3H          equ	3935	;# 
   165   000F60                     SLRCON          equ	3936	;# 
   166   000F61                     WPUB            equ	3937	;# 
   167   000F62                     IOCB            equ	3938	;# 
   168   000F63                     PSTR2CON        equ	3939	;# 
   169   000F64                     ECCP2AS         equ	3940	;# 
   170   000F64                     CCP2AS          equ	3940	;# 
   171   000F65                     PWM2CON         equ	3941	;# 
   172   000F66                     CCP2CON         equ	3942	;# 
   173   000F67                     CCPR2           equ	3943	;# 
   174   000F67                     CCPR2L          equ	3943	;# 
   175   000F68                     CCPR2H          equ	3944	;# 
   176   000F69                     SSP2CON3        equ	3945	;# 
   177   000F6A                     SSP2MSK         equ	3946	;# 
   178   000F6B                     SSP2CON2        equ	3947	;# 
   179   000F6C                     SSP2CON1        equ	3948	;# 
   180   000F6D                     SSP2STAT        equ	3949	;# 
   181   000F6E                     SSP2ADD         equ	3950	;# 
   182   000F6F                     SSP2BUF         equ	3951	;# 
   183   000F70                     BAUDCON2        equ	3952	;# 
   184   000F70                     BAUD2CON        equ	3952	;# 
   185   000F71                     RCSTA2          equ	3953	;# 
   186   000F71                     RC2STA          equ	3953	;# 
   187   000F72                     TXSTA2          equ	3954	;# 
   188   000F72                     TX2STA          equ	3954	;# 
   189   000F73                     TXREG2          equ	3955	;# 
   190   000F73                     TX2REG          equ	3955	;# 
   191   000F74                     RCREG2          equ	3956	;# 
   192   000F74                     RC2REG          equ	3956	;# 
   193   000F75                     SPBRG2          equ	3957	;# 
   194   000F75                     SP2BRG          equ	3957	;# 
   195   000F76                     SPBRGH2         equ	3958	;# 
   196   000F76                     SP2BRGH         equ	3958	;# 
   197   000F77                     CM2CON1         equ	3959	;# 
   198   000F77                     CM12CON         equ	3959	;# 
   199   000F78                     CM2CON0         equ	3960	;# 
   200   000F78                     CM2CON          equ	3960	;# 
   201   000F79                     CM1CON0         equ	3961	;# 
   202   000F79                     CM1CON          equ	3961	;# 
   203   000F7A                     PIE4            equ	3962	;# 
   204   000F7B                     PIR4            equ	3963	;# 
   205   000F7C                     IPR4            equ	3964	;# 
   206   000F7D                     PIE5            equ	3965	;# 
   207   000F7E                     PIR5            equ	3966	;# 
   208   000F7F                     IPR5            equ	3967	;# 
   209   000F80                     PORTA           equ	3968	;# 
   210   000F81                     PORTB           equ	3969	;# 
   211   000F82                     PORTC           equ	3970	;# 
   212   000F84                     PORTE           equ	3972	;# 
   213   000F89                     LATA            equ	3977	;# 
   214   000F8A                     LATB            equ	3978	;# 
   215   000F8B                     LATC            equ	3979	;# 
   216   000F92                     TRISA           equ	3986	;# 
   217   000F92                     DDRA            equ	3986	;# 
   218   000F93                     TRISB           equ	3987	;# 
   219   000F93                     DDRB            equ	3987	;# 
   220   000F94                     TRISC           equ	3988	;# 
   221   000F94                     DDRC            equ	3988	;# 
   222   000F96                     TRISE           equ	3990	;# 
   223   000F9B                     OSCTUNE         equ	3995	;# 
   224   000F9C                     HLVDCON         equ	3996	;# 
   225   000F9C                     LVDCON          equ	3996	;# 
   226   000F9D                     PIE1            equ	3997	;# 
   227   000F9E                     PIR1            equ	3998	;# 
   228   000F9F                     IPR1            equ	3999	;# 
   229   000FA0                     PIE2            equ	4000	;# 
   230   000FA1                     PIR2            equ	4001	;# 
   231   000FA2                     IPR2            equ	4002	;# 
   232   000FA3                     PIE3            equ	4003	;# 
   233   000FA4                     PIR3            equ	4004	;# 
   234   000FA5                     IPR3            equ	4005	;# 
   235   000FA6                     EECON1          equ	4006	;# 
   236   000FA7                     EECON2          equ	4007	;# 
   237   000FA8                     EEDATA          equ	4008	;# 
   238   000FA9                     EEADR           equ	4009	;# 
   239   000FAB                     RCSTA1          equ	4011	;# 
   240   000FAB                     RCSTA           equ	4011	;# 
   241   000FAB                     RC1STA          equ	4011	;# 
   242   000FAC                     TXSTA1          equ	4012	;# 
   243   000FAC                     TXSTA           equ	4012	;# 
   244   000FAC                     TX1STA          equ	4012	;# 
   245   000FAD                     TXREG1          equ	4013	;# 
   246   000FAD                     TXREG           equ	4013	;# 
   247   000FAD                     TX1REG          equ	4013	;# 
   248   000FAE                     RCREG1          equ	4014	;# 
   249   000FAE                     RCREG           equ	4014	;# 
   250   000FAE                     RC1REG          equ	4014	;# 
   251   000FAF                     SPBRG1          equ	4015	;# 
   252   000FAF                     SPBRG           equ	4015	;# 
   253   000FAF                     SP1BRG          equ	4015	;# 
   254   000FB0                     SPBRGH1         equ	4016	;# 
   255   000FB0                     SPBRGH          equ	4016	;# 
   256   000FB0                     SP1BRGH         equ	4016	;# 
   257   000FB1                     T3CON           equ	4017	;# 
   258   000FB2                     TMR3            equ	4018	;# 
   259   000FB2                     TMR3L           equ	4018	;# 
   260   000FB3                     TMR3H           equ	4019	;# 
   261   000FB4                     T3GCON          equ	4020	;# 
   262   000FB6                     ECCP1AS         equ	4022	;# 
   263   000FB6                     ECCPAS          equ	4022	;# 
   264   000FB7                     PWM1CON         equ	4023	;# 
   265   000FB7                     PWMCON          equ	4023	;# 
   266   000FB8                     BAUDCON1        equ	4024	;# 
   267   000FB8                     BAUDCON         equ	4024	;# 
   268   000FB8                     BAUDCTL         equ	4024	;# 
   269   000FB8                     BAUD1CON        equ	4024	;# 
   270   000FB9                     PSTR1CON        equ	4025	;# 
   271   000FB9                     PSTRCON         equ	4025	;# 
   272   000FBA                     T2CON           equ	4026	;# 
   273   000FBB                     PR2             equ	4027	;# 
   274   000FBC                     TMR2            equ	4028	;# 
   275   000FBD                     CCP1CON         equ	4029	;# 
   276   000FBE                     CCPR1           equ	4030	;# 
   277   000FBE                     CCPR1L          equ	4030	;# 
   278   000FBF                     CCPR1H          equ	4031	;# 
   279   000FC0                     ADCON2          equ	4032	;# 
   280   000FC1                     ADCON1          equ	4033	;# 
   281   000FC2                     ADCON0          equ	4034	;# 
   282   000FC3                     ADRES           equ	4035	;# 
   283   000FC3                     ADRESL          equ	4035	;# 
   284   000FC4                     ADRESH          equ	4036	;# 
   285   000FC5                     SSP1CON2        equ	4037	;# 
   286   000FC5                     SSPCON2         equ	4037	;# 
   287   000FC6                     SSP1CON1        equ	4038	;# 
   288   000FC6                     SSPCON1         equ	4038	;# 
   289   000FC7                     SSP1STAT        equ	4039	;# 
   290   000FC7                     SSPSTAT         equ	4039	;# 
   291   000FC8                     SSP1ADD         equ	4040	;# 
   292   000FC8                     SSPADD          equ	4040	;# 
   293   000FC9                     SSP1BUF         equ	4041	;# 
   294   000FC9                     SSPBUF          equ	4041	;# 
   295   000FCA                     SSP1MSK         equ	4042	;# 
   296   000FCA                     SSPMSK          equ	4042	;# 
   297   000FCB                     SSP1CON3        equ	4043	;# 
   298   000FCB                     SSPCON3         equ	4043	;# 
   299   000FCC                     T1GCON          equ	4044	;# 
   300   000FCD                     T1CON           equ	4045	;# 
   301   000FCE                     TMR1            equ	4046	;# 
   302   000FCE                     TMR1L           equ	4046	;# 
   303   000FCF                     TMR1H           equ	4047	;# 
   304   000FD0                     RCON            equ	4048	;# 
   305   000FD1                     WDTCON          equ	4049	;# 
   306   000FD2                     OSCCON2         equ	4050	;# 
   307   000FD3                     OSCCON          equ	4051	;# 
   308   000FD5                     T0CON           equ	4053	;# 
   309   000FD6                     TMR0            equ	4054	;# 
   310   000FD6                     TMR0L           equ	4054	;# 
   311   000FD7                     TMR0H           equ	4055	;# 
   312   000FD8                     STATUS          equ	4056	;# 
   313   000FD9                     FSR2            equ	4057	;# 
   314   000FD9                     FSR2L           equ	4057	;# 
   315   000FDA                     FSR2H           equ	4058	;# 
   316   000FDB                     PLUSW2          equ	4059	;# 
   317   000FDC                     PREINC2         equ	4060	;# 
   318   000FDD                     POSTDEC2        equ	4061	;# 
   319   000FDE                     POSTINC2        equ	4062	;# 
   320   000FDF                     INDF2           equ	4063	;# 
   321   000FE0                     BSR             equ	4064	;# 
   322   000FE1                     FSR1            equ	4065	;# 
   323   000FE1                     FSR1L           equ	4065	;# 
   324   000FE2                     FSR1H           equ	4066	;# 
   325   000FE3                     PLUSW1          equ	4067	;# 
   326   000FE4                     PREINC1         equ	4068	;# 
   327   000FE5                     POSTDEC1        equ	4069	;# 
   328   000FE6                     POSTINC1        equ	4070	;# 
   329   000FE7                     INDF1           equ	4071	;# 
   330   000FE8                     WREG            equ	4072	;# 
   331   000FE9                     FSR0            equ	4073	;# 
   332   000FE9                     FSR0L           equ	4073	;# 
   333   000FEA                     FSR0H           equ	4074	;# 
   334   000FEB                     PLUSW0          equ	4075	;# 
   335   000FEC                     PREINC0         equ	4076	;# 
   336   000FED                     POSTDEC0        equ	4077	;# 
   337   000FEE                     POSTINC0        equ	4078	;# 
   338   000FEF                     INDF0           equ	4079	;# 
   339   000FF0                     INTCON3         equ	4080	;# 
   340   000FF1                     INTCON2         equ	4081	;# 
   341   000FF2                     INTCON          equ	4082	;# 
   342   000FF3                     PROD            equ	4083	;# 
   343   000FF3                     PRODL           equ	4083	;# 
   344   000FF4                     PRODH           equ	4084	;# 
   345   000FF5                     TABLAT          equ	4085	;# 
   346   000FF6                     TBLPTR          equ	4086	;# 
   347   000FF6                     TBLPTRL         equ	4086	;# 
   348   000FF7                     TBLPTRH         equ	4087	;# 
   349   000FF8                     TBLPTRU         equ	4088	;# 
   350   000FF9                     PCLAT           equ	4089	;# 
   351   000FF9                     PC              equ	4089	;# 
   352   000FF9                     PCL             equ	4089	;# 
   353   000FFA                     PCLATH          equ	4090	;# 
   354   000FFB                     PCLATU          equ	4091	;# 
   355   000FFC                     STKPTR          equ	4092	;# 
   356   000FFD                     TOS             equ	4093	;# 
   357   000FFD                     TOSL            equ	4093	;# 
   358   000FFE                     TOSH            equ	4094	;# 
   359   000FFF                     TOSU            equ	4095	;# 
   360   000F38                     ANSELA          equ	3896	;# 
   361   000F39                     ANSELB          equ	3897	;# 
   362   000F3A                     ANSELC          equ	3898	;# 
   363   000F3D                     PMD2            equ	3901	;# 
   364   000F3E                     PMD1            equ	3902	;# 
   365   000F3F                     PMD0            equ	3903	;# 
   366   000F40                     VREFCON2        equ	3904	;# 
   367   000F40                     DACCON1         equ	3904	;# 
   368   000F41                     VREFCON1        equ	3905	;# 
   369   000F41                     DACCON0         equ	3905	;# 
   370   000F42                     VREFCON0        equ	3906	;# 
   371   000F42                     FVRCON          equ	3906	;# 
   372   000F43                     CTMUICON        equ	3907	;# 
   373   000F43                     CTMUICONH       equ	3907	;# 
   374   000F44                     CTMUCONL        equ	3908	;# 
   375   000F44                     CTMUCON1        equ	3908	;# 
   376   000F45                     CTMUCONH        equ	3909	;# 
   377   000F45                     CTMUCON0        equ	3909	;# 
   378   000F46                     SRCON1          equ	3910	;# 
   379   000F47                     SRCON0          equ	3911	;# 
   380   000F48                     CCPTMRS1        equ	3912	;# 
   381   000F49                     CCPTMRS0        equ	3913	;# 
   382   000F4A                     T6CON           equ	3914	;# 
   383   000F4B                     PR6             equ	3915	;# 
   384   000F4C                     TMR6            equ	3916	;# 
   385   000F4D                     T5GCON          equ	3917	;# 
   386   000F4E                     T5CON           equ	3918	;# 
   387   000F4F                     TMR5            equ	3919	;# 
   388   000F4F                     TMR5L           equ	3919	;# 
   389   000F50                     TMR5H           equ	3920	;# 
   390   000F51                     T4CON           equ	3921	;# 
   391   000F52                     PR4             equ	3922	;# 
   392   000F53                     TMR4            equ	3923	;# 
   393   000F54                     CCP5CON         equ	3924	;# 
   394   000F55                     CCPR5           equ	3925	;# 
   395   000F55                     CCPR5L          equ	3925	;# 
   396   000F56                     CCPR5H          equ	3926	;# 
   397   000F57                     CCP4CON         equ	3927	;# 
   398   000F58                     CCPR4           equ	3928	;# 
   399   000F58                     CCPR4L          equ	3928	;# 
   400   000F59                     CCPR4H          equ	3929	;# 
   401   000F5A                     PSTR3CON        equ	3930	;# 
   402   000F5B                     ECCP3AS         equ	3931	;# 
   403   000F5B                     CCP3AS          equ	3931	;# 
   404   000F5C                     PWM3CON         equ	3932	;# 
   405   000F5D                     CCP3CON         equ	3933	;# 
   406   000F5E                     CCPR3           equ	3934	;# 
   407   000F5E                     CCPR3L          equ	3934	;# 
   408   000F5F                     CCPR3H          equ	3935	;# 
   409   000F60                     SLRCON          equ	3936	;# 
   410   000F61                     WPUB            equ	3937	;# 
   411   000F62                     IOCB            equ	3938	;# 
   412   000F63                     PSTR2CON        equ	3939	;# 
   413   000F64                     ECCP2AS         equ	3940	;# 
   414   000F64                     CCP2AS          equ	3940	;# 
   415   000F65                     PWM2CON         equ	3941	;# 
   416   000F66                     CCP2CON         equ	3942	;# 
   417   000F67                     CCPR2           equ	3943	;# 
   418   000F67                     CCPR2L          equ	3943	;# 
   419   000F68                     CCPR2H          equ	3944	;# 
   420   000F69                     SSP2CON3        equ	3945	;# 
   421   000F6A                     SSP2MSK         equ	3946	;# 
   422   000F6B                     SSP2CON2        equ	3947	;# 
   423   000F6C                     SSP2CON1        equ	3948	;# 
   424   000F6D                     SSP2STAT        equ	3949	;# 
   425   000F6E                     SSP2ADD         equ	3950	;# 
   426   000F6F                     SSP2BUF         equ	3951	;# 
   427   000F70                     BAUDCON2        equ	3952	;# 
   428   000F70                     BAUD2CON        equ	3952	;# 
   429   000F71                     RCSTA2          equ	3953	;# 
   430   000F71                     RC2STA          equ	3953	;# 
   431   000F72                     TXSTA2          equ	3954	;# 
   432   000F72                     TX2STA          equ	3954	;# 
   433   000F73                     TXREG2          equ	3955	;# 
   434   000F73                     TX2REG          equ	3955	;# 
   435   000F74                     RCREG2          equ	3956	;# 
   436   000F74                     RC2REG          equ	3956	;# 
   437   000F75                     SPBRG2          equ	3957	;# 
   438   000F75                     SP2BRG          equ	3957	;# 
   439   000F76                     SPBRGH2         equ	3958	;# 
   440   000F76                     SP2BRGH         equ	3958	;# 
   441   000F77                     CM2CON1         equ	3959	;# 
   442   000F77                     CM12CON         equ	3959	;# 
   443   000F78                     CM2CON0         equ	3960	;# 
   444   000F78                     CM2CON          equ	3960	;# 
   445   000F79                     CM1CON0         equ	3961	;# 
   446   000F79                     CM1CON          equ	3961	;# 
   447   000F7A                     PIE4            equ	3962	;# 
   448   000F7B                     PIR4            equ	3963	;# 
   449   000F7C                     IPR4            equ	3964	;# 
   450   000F7D                     PIE5            equ	3965	;# 
   451   000F7E                     PIR5            equ	3966	;# 
   452   000F7F                     IPR5            equ	3967	;# 
   453   000F80                     PORTA           equ	3968	;# 
   454   000F81                     PORTB           equ	3969	;# 
   455   000F82                     PORTC           equ	3970	;# 
   456   000F84                     PORTE           equ	3972	;# 
   457   000F89                     LATA            equ	3977	;# 
   458   000F8A                     LATB            equ	3978	;# 
   459   000F8B                     LATC            equ	3979	;# 
   460   000F92                     TRISA           equ	3986	;# 
   461   000F92                     DDRA            equ	3986	;# 
   462   000F93                     TRISB           equ	3987	;# 
   463   000F93                     DDRB            equ	3987	;# 
   464   000F94                     TRISC           equ	3988	;# 
   465   000F94                     DDRC            equ	3988	;# 
   466   000F96                     TRISE           equ	3990	;# 
   467   000F9B                     OSCTUNE         equ	3995	;# 
   468   000F9C                     HLVDCON         equ	3996	;# 
   469   000F9C                     LVDCON          equ	3996	;# 
   470   000F9D                     PIE1            equ	3997	;# 
   471   000F9E                     PIR1            equ	3998	;# 
   472   000F9F                     IPR1            equ	3999	;# 
   473   000FA0                     PIE2            equ	4000	;# 
   474   000FA1                     PIR2            equ	4001	;# 
   475   000FA2                     IPR2            equ	4002	;# 
   476   000FA3                     PIE3            equ	4003	;# 
   477   000FA4                     PIR3            equ	4004	;# 
   478   000FA5                     IPR3            equ	4005	;# 
   479   000FA6                     EECON1          equ	4006	;# 
   480   000FA7                     EECON2          equ	4007	;# 
   481   000FA8                     EEDATA          equ	4008	;# 
   482   000FA9                     EEADR           equ	4009	;# 
   483   000FAB                     RCSTA1          equ	4011	;# 
   484   000FAB                     RCSTA           equ	4011	;# 
   485   000FAB                     RC1STA          equ	4011	;# 
   486   000FAC                     TXSTA1          equ	4012	;# 
   487   000FAC                     TXSTA           equ	4012	;# 
   488   000FAC                     TX1STA          equ	4012	;# 
   489   000FAD                     TXREG1          equ	4013	;# 
   490   000FAD                     TXREG           equ	4013	;# 
   491   000FAD                     TX1REG          equ	4013	;# 
   492   000FAE                     RCREG1          equ	4014	;# 
   493   000FAE                     RCREG           equ	4014	;# 
   494   000FAE                     RC1REG          equ	4014	;# 
   495   000FAF                     SPBRG1          equ	4015	;# 
   496   000FAF                     SPBRG           equ	4015	;# 
   497   000FAF                     SP1BRG          equ	4015	;# 
   498   000FB0                     SPBRGH1         equ	4016	;# 
   499   000FB0                     SPBRGH          equ	4016	;# 
   500   000FB0                     SP1BRGH         equ	4016	;# 
   501   000FB1                     T3CON           equ	4017	;# 
   502   000FB2                     TMR3            equ	4018	;# 
   503   000FB2                     TMR3L           equ	4018	;# 
   504   000FB3                     TMR3H           equ	4019	;# 
   505   000FB4                     T3GCON          equ	4020	;# 
   506   000FB6                     ECCP1AS         equ	4022	;# 
   507   000FB6                     ECCPAS          equ	4022	;# 
   508   000FB7                     PWM1CON         equ	4023	;# 
   509   000FB7                     PWMCON          equ	4023	;# 
   510   000FB8                     BAUDCON1        equ	4024	;# 
   511   000FB8                     BAUDCON         equ	4024	;# 
   512   000FB8                     BAUDCTL         equ	4024	;# 
   513   000FB8                     BAUD1CON        equ	4024	;# 
   514   000FB9                     PSTR1CON        equ	4025	;# 
   515   000FB9                     PSTRCON         equ	4025	;# 
   516   000FBA                     T2CON           equ	4026	;# 
   517   000FBB                     PR2             equ	4027	;# 
   518   000FBC                     TMR2            equ	4028	;# 
   519   000FBD                     CCP1CON         equ	4029	;# 
   520   000FBE                     CCPR1           equ	4030	;# 
   521   000FBE                     CCPR1L          equ	4030	;# 
   522   000FBF                     CCPR1H          equ	4031	;# 
   523   000FC0                     ADCON2          equ	4032	;# 
   524   000FC1                     ADCON1          equ	4033	;# 
   525   000FC2                     ADCON0          equ	4034	;# 
   526   000FC3                     ADRES           equ	4035	;# 
   527   000FC3                     ADRESL          equ	4035	;# 
   528   000FC4                     ADRESH          equ	4036	;# 
   529   000FC5                     SSP1CON2        equ	4037	;# 
   530   000FC5                     SSPCON2         equ	4037	;# 
   531   000FC6                     SSP1CON1        equ	4038	;# 
   532   000FC6                     SSPCON1         equ	4038	;# 
   533   000FC7                     SSP1STAT        equ	4039	;# 
   534   000FC7                     SSPSTAT         equ	4039	;# 
   535   000FC8                     SSP1ADD         equ	4040	;# 
   536   000FC8                     SSPADD          equ	4040	;# 
   537   000FC9                     SSP1BUF         equ	4041	;# 
   538   000FC9                     SSPBUF          equ	4041	;# 
   539   000FCA                     SSP1MSK         equ	4042	;# 
   540   000FCA                     SSPMSK          equ	4042	;# 
   541   000FCB                     SSP1CON3        equ	4043	;# 
   542   000FCB                     SSPCON3         equ	4043	;# 
   543   000FCC                     T1GCON          equ	4044	;# 
   544   000FCD                     T1CON           equ	4045	;# 
   545   000FCE                     TMR1            equ	4046	;# 
   546   000FCE                     TMR1L           equ	4046	;# 
   547   000FCF                     TMR1H           equ	4047	;# 
   548   000FD0                     RCON            equ	4048	;# 
   549   000FD1                     WDTCON          equ	4049	;# 
   550   000FD2                     OSCCON2         equ	4050	;# 
   551   000FD3                     OSCCON          equ	4051	;# 
   552   000FD5                     T0CON           equ	4053	;# 
   553   000FD6                     TMR0            equ	4054	;# 
   554   000FD6                     TMR0L           equ	4054	;# 
   555   000FD7                     TMR0H           equ	4055	;# 
   556   000FD8                     STATUS          equ	4056	;# 
   557   000FD9                     FSR2            equ	4057	;# 
   558   000FD9                     FSR2L           equ	4057	;# 
   559   000FDA                     FSR2H           equ	4058	;# 
   560   000FDB                     PLUSW2          equ	4059	;# 
   561   000FDC                     PREINC2         equ	4060	;# 
   562   000FDD                     POSTDEC2        equ	4061	;# 
   563   000FDE                     POSTINC2        equ	4062	;# 
   564   000FDF                     INDF2           equ	4063	;# 
   565   000FE0                     BSR             equ	4064	;# 
   566   000FE1                     FSR1            equ	4065	;# 
   567   000FE1                     FSR1L           equ	4065	;# 
   568   000FE2                     FSR1H           equ	4066	;# 
   569   000FE3                     PLUSW1          equ	4067	;# 
   570   000FE4                     PREINC1         equ	4068	;# 
   571   000FE5                     POSTDEC1        equ	4069	;# 
   572   000FE6                     POSTINC1        equ	4070	;# 
   573   000FE7                     INDF1           equ	4071	;# 
   574   000FE8                     WREG            equ	4072	;# 
   575   000FE9                     FSR0            equ	4073	;# 
   576   000FE9                     FSR0L           equ	4073	;# 
   577   000FEA                     FSR0H           equ	4074	;# 
   578   000FEB                     PLUSW0          equ	4075	;# 
   579   000FEC                     PREINC0         equ	4076	;# 
   580   000FED                     POSTDEC0        equ	4077	;# 
   581   000FEE                     POSTINC0        equ	4078	;# 
   582   000FEF                     INDF0           equ	4079	;# 
   583   000FF0                     INTCON3         equ	4080	;# 
   584   000FF1                     INTCON2         equ	4081	;# 
   585   000FF2                     INTCON          equ	4082	;# 
   586   000FF3                     PROD            equ	4083	;# 
   587   000FF3                     PRODL           equ	4083	;# 
   588   000FF4                     PRODH           equ	4084	;# 
   589   000FF5                     TABLAT          equ	4085	;# 
   590   000FF6                     TBLPTR          equ	4086	;# 
   591   000FF6                     TBLPTRL         equ	4086	;# 
   592   000FF7                     TBLPTRH         equ	4087	;# 
   593   000FF8                     TBLPTRU         equ	4088	;# 
   594   000FF9                     PCLAT           equ	4089	;# 
   595   000FF9                     PC              equ	4089	;# 
   596   000FF9                     PCL             equ	4089	;# 
   597   000FFA                     PCLATH          equ	4090	;# 
   598   000FFB                     PCLATU          equ	4091	;# 
   599   000FFC                     STKPTR          equ	4092	;# 
   600   000FFD                     TOS             equ	4093	;# 
   601   000FFD                     TOSL            equ	4093	;# 
   602   000FFE                     TOSH            equ	4094	;# 
   603   000FFF                     TOSU            equ	4095	;# 
   604   000F38                     ANSELA          equ	3896	;# 
   605   000F39                     ANSELB          equ	3897	;# 
   606   000F3A                     ANSELC          equ	3898	;# 
   607   000F3D                     PMD2            equ	3901	;# 
   608   000F3E                     PMD1            equ	3902	;# 
   609   000F3F                     PMD0            equ	3903	;# 
   610   000F40                     VREFCON2        equ	3904	;# 
   611   000F40                     DACCON1         equ	3904	;# 
   612   000F41                     VREFCON1        equ	3905	;# 
   613   000F41                     DACCON0         equ	3905	;# 
   614   000F42                     VREFCON0        equ	3906	;# 
   615   000F42                     FVRCON          equ	3906	;# 
   616   000F43                     CTMUICON        equ	3907	;# 
   617   000F43                     CTMUICONH       equ	3907	;# 
   618   000F44                     CTMUCONL        equ	3908	;# 
   619   000F44                     CTMUCON1        equ	3908	;# 
   620   000F45                     CTMUCONH        equ	3909	;# 
   621   000F45                     CTMUCON0        equ	3909	;# 
   622   000F46                     SRCON1          equ	3910	;# 
   623   000F47                     SRCON0          equ	3911	;# 
   624   000F48                     CCPTMRS1        equ	3912	;# 
   625   000F49                     CCPTMRS0        equ	3913	;# 
   626   000F4A                     T6CON           equ	3914	;# 
   627   000F4B                     PR6             equ	3915	;# 
   628   000F4C                     TMR6            equ	3916	;# 
   629   000F4D                     T5GCON          equ	3917	;# 
   630   000F4E                     T5CON           equ	3918	;# 
   631   000F4F                     TMR5            equ	3919	;# 
   632   000F4F                     TMR5L           equ	3919	;# 
   633   000F50                     TMR5H           equ	3920	;# 
   634   000F51                     T4CON           equ	3921	;# 
   635   000F52                     PR4             equ	3922	;# 
   636   000F53                     TMR4            equ	3923	;# 
   637   000F54                     CCP5CON         equ	3924	;# 
   638   000F55                     CCPR5           equ	3925	;# 
   639   000F55                     CCPR5L          equ	3925	;# 
   640   000F56                     CCPR5H          equ	3926	;# 
   641   000F57                     CCP4CON         equ	3927	;# 
   642   000F58                     CCPR4           equ	3928	;# 
   643   000F58                     CCPR4L          equ	3928	;# 
   644   000F59                     CCPR4H          equ	3929	;# 
   645   000F5A                     PSTR3CON        equ	3930	;# 
   646   000F5B                     ECCP3AS         equ	3931	;# 
   647   000F5B                     CCP3AS          equ	3931	;# 
   648   000F5C                     PWM3CON         equ	3932	;# 
   649   000F5D                     CCP3CON         equ	3933	;# 
   650   000F5E                     CCPR3           equ	3934	;# 
   651   000F5E                     CCPR3L          equ	3934	;# 
   652   000F5F                     CCPR3H          equ	3935	;# 
   653   000F60                     SLRCON          equ	3936	;# 
   654   000F61                     WPUB            equ	3937	;# 
   655   000F62                     IOCB            equ	3938	;# 
   656   000F63                     PSTR2CON        equ	3939	;# 
   657   000F64                     ECCP2AS         equ	3940	;# 
   658   000F64                     CCP2AS          equ	3940	;# 
   659   000F65                     PWM2CON         equ	3941	;# 
   660   000F66                     CCP2CON         equ	3942	;# 
   661   000F67                     CCPR2           equ	3943	;# 
   662   000F67                     CCPR2L          equ	3943	;# 
   663   000F68                     CCPR2H          equ	3944	;# 
   664   000F69                     SSP2CON3        equ	3945	;# 
   665   000F6A                     SSP2MSK         equ	3946	;# 
   666   000F6B                     SSP2CON2        equ	3947	;# 
   667   000F6C                     SSP2CON1        equ	3948	;# 
   668   000F6D                     SSP2STAT        equ	3949	;# 
   669   000F6E                     SSP2ADD         equ	3950	;# 
   670   000F6F                     SSP2BUF         equ	3951	;# 
   671   000F70                     BAUDCON2        equ	3952	;# 
   672   000F70                     BAUD2CON        equ	3952	;# 
   673   000F71                     RCSTA2          equ	3953	;# 
   674   000F71                     RC2STA          equ	3953	;# 
   675   000F72                     TXSTA2          equ	3954	;# 
   676   000F72                     TX2STA          equ	3954	;# 
   677   000F73                     TXREG2          equ	3955	;# 
   678   000F73                     TX2REG          equ	3955	;# 
   679   000F74                     RCREG2          equ	3956	;# 
   680   000F74                     RC2REG          equ	3956	;# 
   681   000F75                     SPBRG2          equ	3957	;# 
   682   000F75                     SP2BRG          equ	3957	;# 
   683   000F76                     SPBRGH2         equ	3958	;# 
   684   000F76                     SP2BRGH         equ	3958	;# 
   685   000F77                     CM2CON1         equ	3959	;# 
   686   000F77                     CM12CON         equ	3959	;# 
   687   000F78                     CM2CON0         equ	3960	;# 
   688   000F78                     CM2CON          equ	3960	;# 
   689   000F79                     CM1CON0         equ	3961	;# 
   690   000F79                     CM1CON          equ	3961	;# 
   691   000F7A                     PIE4            equ	3962	;# 
   692   000F7B                     PIR4            equ	3963	;# 
   693   000F7C                     IPR4            equ	3964	;# 
   694   000F7D                     PIE5            equ	3965	;# 
   695   000F7E                     PIR5            equ	3966	;# 
   696   000F7F                     IPR5            equ	3967	;# 
   697   000F80                     PORTA           equ	3968	;# 
   698   000F81                     PORTB           equ	3969	;# 
   699   000F82                     PORTC           equ	3970	;# 
   700   000F84                     PORTE           equ	3972	;# 
   701   000F89                     LATA            equ	3977	;# 
   702   000F8A                     LATB            equ	3978	;# 
   703   000F8B                     LATC            equ	3979	;# 
   704   000F92                     TRISA           equ	3986	;# 
   705   000F92                     DDRA            equ	3986	;# 
   706   000F93                     TRISB           equ	3987	;# 
   707   000F93                     DDRB            equ	3987	;# 
   708   000F94                     TRISC           equ	3988	;# 
   709   000F94                     DDRC            equ	3988	;# 
   710   000F96                     TRISE           equ	3990	;# 
   711   000F9B                     OSCTUNE         equ	3995	;# 
   712   000F9C                     HLVDCON         equ	3996	;# 
   713   000F9C                     LVDCON          equ	3996	;# 
   714   000F9D                     PIE1            equ	3997	;# 
   715   000F9E                     PIR1            equ	3998	;# 
   716   000F9F                     IPR1            equ	3999	;# 
   717   000FA0                     PIE2            equ	4000	;# 
   718   000FA1                     PIR2            equ	4001	;# 
   719   000FA2                     IPR2            equ	4002	;# 
   720   000FA3                     PIE3            equ	4003	;# 
   721   000FA4                     PIR3            equ	4004	;# 
   722   000FA5                     IPR3            equ	4005	;# 
   723   000FA6                     EECON1          equ	4006	;# 
   724   000FA7                     EECON2          equ	4007	;# 
   725   000FA8                     EEDATA          equ	4008	;# 
   726   000FA9                     EEADR           equ	4009	;# 
   727   000FAB                     RCSTA1          equ	4011	;# 
   728   000FAB                     RCSTA           equ	4011	;# 
   729   000FAB                     RC1STA          equ	4011	;# 
   730   000FAC                     TXSTA1          equ	4012	;# 
   731   000FAC                     TXSTA           equ	4012	;# 
   732   000FAC                     TX1STA          equ	4012	;# 
   733   000FAD                     TXREG1          equ	4013	;# 
   734   000FAD                     TXREG           equ	4013	;# 
   735   000FAD                     TX1REG          equ	4013	;# 
   736   000FAE                     RCREG1          equ	4014	;# 
   737   000FAE                     RCREG           equ	4014	;# 
   738   000FAE                     RC1REG          equ	4014	;# 
   739   000FAF                     SPBRG1          equ	4015	;# 
   740   000FAF                     SPBRG           equ	4015	;# 
   741   000FAF                     SP1BRG          equ	4015	;# 
   742   000FB0                     SPBRGH1         equ	4016	;# 
   743   000FB0                     SPBRGH          equ	4016	;# 
   744   000FB0                     SP1BRGH         equ	4016	;# 
   745   000FB1                     T3CON           equ	4017	;# 
   746   000FB2                     TMR3            equ	4018	;# 
   747   000FB2                     TMR3L           equ	4018	;# 
   748   000FB3                     TMR3H           equ	4019	;# 
   749   000FB4                     T3GCON          equ	4020	;# 
   750   000FB6                     ECCP1AS         equ	4022	;# 
   751   000FB6                     ECCPAS          equ	4022	;# 
   752   000FB7                     PWM1CON         equ	4023	;# 
   753   000FB7                     PWMCON          equ	4023	;# 
   754   000FB8                     BAUDCON1        equ	4024	;# 
   755   000FB8                     BAUDCON         equ	4024	;# 
   756   000FB8                     BAUDCTL         equ	4024	;# 
   757   000FB8                     BAUD1CON        equ	4024	;# 
   758   000FB9                     PSTR1CON        equ	4025	;# 
   759   000FB9                     PSTRCON         equ	4025	;# 
   760   000FBA                     T2CON           equ	4026	;# 
   761   000FBB                     PR2             equ	4027	;# 
   762   000FBC                     TMR2            equ	4028	;# 
   763   000FBD                     CCP1CON         equ	4029	;# 
   764   000FBE                     CCPR1           equ	4030	;# 
   765   000FBE                     CCPR1L          equ	4030	;# 
   766   000FBF                     CCPR1H          equ	4031	;# 
   767   000FC0                     ADCON2          equ	4032	;# 
   768   000FC1                     ADCON1          equ	4033	;# 
   769   000FC2                     ADCON0          equ	4034	;# 
   770   000FC3                     ADRES           equ	4035	;# 
   771   000FC3                     ADRESL          equ	4035	;# 
   772   000FC4                     ADRESH          equ	4036	;# 
   773   000FC5                     SSP1CON2        equ	4037	;# 
   774   000FC5                     SSPCON2         equ	4037	;# 
   775   000FC6                     SSP1CON1        equ	4038	;# 
   776   000FC6                     SSPCON1         equ	4038	;# 
   777   000FC7                     SSP1STAT        equ	4039	;# 
   778   000FC7                     SSPSTAT         equ	4039	;# 
   779   000FC8                     SSP1ADD         equ	4040	;# 
   780   000FC8                     SSPADD          equ	4040	;# 
   781   000FC9                     SSP1BUF         equ	4041	;# 
   782   000FC9                     SSPBUF          equ	4041	;# 
   783   000FCA                     SSP1MSK         equ	4042	;# 
   784   000FCA                     SSPMSK          equ	4042	;# 
   785   000FCB                     SSP1CON3        equ	4043	;# 
   786   000FCB                     SSPCON3         equ	4043	;# 
   787   000FCC                     T1GCON          equ	4044	;# 
   788   000FCD                     T1CON           equ	4045	;# 
   789   000FCE                     TMR1            equ	4046	;# 
   790   000FCE                     TMR1L           equ	4046	;# 
   791   000FCF                     TMR1H           equ	4047	;# 
   792   000FD0                     RCON            equ	4048	;# 
   793   000FD1                     WDTCON          equ	4049	;# 
   794   000FD2                     OSCCON2         equ	4050	;# 
   795   000FD3                     OSCCON          equ	4051	;# 
   796   000FD5                     T0CON           equ	4053	;# 
   797   000FD6                     TMR0            equ	4054	;# 
   798   000FD6                     TMR0L           equ	4054	;# 
   799   000FD7                     TMR0H           equ	4055	;# 
   800   000FD8                     STATUS          equ	4056	;# 
   801   000FD9                     FSR2            equ	4057	;# 
   802   000FD9                     FSR2L           equ	4057	;# 
   803   000FDA                     FSR2H           equ	4058	;# 
   804   000FDB                     PLUSW2          equ	4059	;# 
   805   000FDC                     PREINC2         equ	4060	;# 
   806   000FDD                     POSTDEC2        equ	4061	;# 
   807   000FDE                     POSTINC2        equ	4062	;# 
   808   000FDF                     INDF2           equ	4063	;# 
   809   000FE0                     BSR             equ	4064	;# 
   810   000FE1                     FSR1            equ	4065	;# 
   811   000FE1                     FSR1L           equ	4065	;# 
   812   000FE2                     FSR1H           equ	4066	;# 
   813   000FE3                     PLUSW1          equ	4067	;# 
   814   000FE4                     PREINC1         equ	4068	;# 
   815   000FE5                     POSTDEC1        equ	4069	;# 
   816   000FE6                     POSTINC1        equ	4070	;# 
   817   000FE7                     INDF1           equ	4071	;# 
   818   000FE8                     WREG            equ	4072	;# 
   819   000FE9                     FSR0            equ	4073	;# 
   820   000FE9                     FSR0L           equ	4073	;# 
   821   000FEA                     FSR0H           equ	4074	;# 
   822   000FEB                     PLUSW0          equ	4075	;# 
   823   000FEC                     PREINC0         equ	4076	;# 
   824   000FED                     POSTDEC0        equ	4077	;# 
   825   000FEE                     POSTINC0        equ	4078	;# 
   826   000FEF                     INDF0           equ	4079	;# 
   827   000FF0                     INTCON3         equ	4080	;# 
   828   000FF1                     INTCON2         equ	4081	;# 
   829   000FF2                     INTCON          equ	4082	;# 
   830   000FF3                     PROD            equ	4083	;# 
   831   000FF3                     PRODL           equ	4083	;# 
   832   000FF4                     PRODH           equ	4084	;# 
   833   000FF5                     TABLAT          equ	4085	;# 
   834   000FF6                     TBLPTR          equ	4086	;# 
   835   000FF6                     TBLPTRL         equ	4086	;# 
   836   000FF7                     TBLPTRH         equ	4087	;# 
   837   000FF8                     TBLPTRU         equ	4088	;# 
   838   000FF9                     PCLAT           equ	4089	;# 
   839   000FF9                     PC              equ	4089	;# 
   840   000FF9                     PCL             equ	4089	;# 
   841   000FFA                     PCLATH          equ	4090	;# 
   842   000FFB                     PCLATU          equ	4091	;# 
   843   000FFC                     STKPTR          equ	4092	;# 
   844   000FFD                     TOS             equ	4093	;# 
   845   000FFD                     TOSL            equ	4093	;# 
   846   000FFE                     TOSH            equ	4094	;# 
   847   000FFF                     TOSU            equ	4095	;# 
   848                           
   849                           	psect	idataCOMRAM
   850   001420                     __pidataCOMRAM:
   851                           	callstack 0
   852                           
   853                           ;initializer for get_button@last
   854   001420  01                 	db	1
   855                           
   856                           	psect	idataBANK0
   857   0013AE                     __pidataBANK0:
   858                           	callstack 0
   859                           
   860                           ;initializer for _params
   861   0013AE  3F                 	db	low STR_1
   862   0013AF  0032               	dw	50
   863   0013B1  0000               	dw	0
   864   0013B3  014F               	dw	335
   865   0013B5  8C                 	db	low STR_2
   866   0013B6  64                 	db	low STR_3
   867   0013B7  0000               	dw	0
   868   0013B9  0000               	dw	0
   869   0013BB  002D               	dw	45
   870   0013BD  88                 	db	low STR_4
   871   0013BE  4D                 	db	low STR_5
   872   0013BF  0032               	dw	50
   873   0013C1  0000               	dw	0
   874   0013C3  014F               	dw	335
   875   0013C5  8C                 	db	low STR_2
   876   0013C6  6E                 	db	low STR_7
   877   0013C7  0000               	dw	0
   878   0013C9  0000               	dw	0
   879   0013CB  002D               	dw	45
   880   0013CD  88                 	db	low STR_4
   881   000F3A                     _ANSELC         set	3898
   882   000F39                     _ANSELB         set	3897
   883   000F38                     _ANSELA         set	3896
   884   000FF2                     _INTCONbits     set	4082
   885   000F9D                     _PIE1bits       set	3997
   886   000FCD                     _T1CON          set	4045
   887   000FF1                     _INTCON2bits    set	4081
   888   000F81                     _PORTB          set	3969
   889   000F93                     _TRISB          set	3987
   890   000F92                     _TRISA          set	3986
   891   000F9B                     _OSCTUNEbits    set	3995
   892   000FD3                     _OSCCON         set	4051
   893   000FCE                     _TMR1L          set	4046
   894   000FCF                     _TMR1H          set	4047
   895   000F9E                     _PIR1bits       set	3998
   896   000F80                     _PORTAbits      set	3968
   897   000F80                     _PORTA          set	3968
   898   000F81                     _PORTBbits      set	3969
   899                           
   900                           	psect	smallconst
   901   000600                     __psmallconst:
   902                           	callstack 0
   903   000600  00                 	db	0
   904   000601                     STR_15:
   905   000601  53                 	db	83	;'S'
   906   000602  68                 	db	104	;'h'
   907   000603  6F                 	db	111	;'o'
   908   000604  72                 	db	114	;'r'
   909   000605  74                 	db	116	;'t'
   910   000606  3A                 	db	58	;':'
   911   000607  20                 	db	32
   912   000608  53                 	db	83	;'S'
   913   000609  61                 	db	97	;'a'
   914   00060A  76                 	db	118	;'v'
   915   00060B  65                 	db	101	;'e'
   916   00060C  20                 	db	32
   917   00060D  7C                 	db	124
   918   00060E  20                 	db	32
   919   00060F  4C                 	db	76	;'L'
   920   000610  6F                 	db	111	;'o'
   921   000611  6E                 	db	110	;'n'
   922   000612  67                 	db	103	;'g'
   923   000613  3A                 	db	58	;':'
   924   000614  20                 	db	32
   925   000615  45                 	db	69	;'E'
   926   000616  78                 	db	120	;'x'
   927   000617  69                 	db	105	;'i'
   928   000618  74                 	db	116	;'t'
   929   000619  00                 	db	0
   930   00061A                     STR_10:
   931   00061A  43                 	db	67	;'C'
   932   00061B  6C                 	db	108	;'l'
   933   00061C  69                 	db	105	;'i'
   934   00061D  63                 	db	99	;'c'
   935   00061E  6B                 	db	107	;'k'
   936   00061F  20                 	db	32
   937   000620  74                 	db	116	;'t'
   938   000621  6F                 	db	111	;'o'
   939   000622  20                 	db	32
   940   000623  6F                 	db	111	;'o'
   941   000624  70                 	db	112	;'p'
   942   000625  65                 	db	101	;'e'
   943   000626  6E                 	db	110	;'n'
   944   000627  20                 	db	32
   945   000628  6D                 	db	109	;'m'
   946   000629  65                 	db	101	;'e'
   947   00062A  6E                 	db	110	;'n'
   948   00062B  75                 	db	117	;'u'
   949   00062C  00                 	db	0
   950   00062D                     STR_9:
   951   00062D  49                 	db	73	;'I'
   952   00062E  72                 	db	114	;'r'
   953   00062F  72                 	db	114	;'r'
   954   000630  69                 	db	105	;'i'
   955   000631  73                 	db	115	;'s'
   956   000632  79                 	db	121	;'y'
   957   000633  73                 	db	115	;'s'
   958   000634  20                 	db	32
   959   000635  4D                 	db	77	;'M'
   960   000636  65                 	db	101	;'e'
   961   000637  6E                 	db	110	;'n'
   962   000638  75                 	db	117	;'u'
   963   000639  20                 	db	32
   964   00063A  44                 	db	68	;'D'
   965   00063B  65                 	db	101	;'e'
   966   00063C  6D                 	db	109	;'m'
   967   00063D  6F                 	db	111	;'o'
   968   00063E  00                 	db	0
   969   00063F                     STR_1:
   970   00063F  48                 	db	72	;'H'
   971   000640  69                 	db	105	;'i'
   972   000641  67                 	db	103	;'g'
   973   000642  68                 	db	104	;'h'
   974   000643  20                 	db	32
   975   000644  50                 	db	80	;'P'
   976   000645  72                 	db	114	;'r'
   977   000646  65                 	db	101	;'e'
   978   000647  73                 	db	115	;'s'
   979   000648  73                 	db	115	;'s'
   980   000649  75                 	db	117	;'u'
   981   00064A  72                 	db	114	;'r'
   982   00064B  65                 	db	101	;'e'
   983   00064C  00                 	db	0
   984   00064D                     STR_5:
   985   00064D  4C                 	db	76	;'L'
   986   00064E  6F                 	db	111	;'o'
   987   00064F  77                 	db	119	;'w'
   988   000650  20                 	db	32
   989   000651  50                 	db	80	;'P'
   990   000652  72                 	db	114	;'r'
   991   000653  65                 	db	101	;'e'
   992   000654  73                 	db	115	;'s'
   993   000655  73                 	db	115	;'s'
   994   000656  75                 	db	117	;'u'
   995   000657  72                 	db	114	;'r'
   996   000658  65                 	db	101	;'e'
   997   000659  00                 	db	0
   998   00065A                     STR_13:
   999   00065A  20                 	db	32
  1000   00065B  20                 	db	32
  1001   00065C  56                 	db	86	;'V'
  1002   00065D  61                 	db	97	;'a'
  1003   00065E  6C                 	db	108	;'l'
  1004   00065F  75                 	db	117	;'u'
  1005   000660  65                 	db	101	;'e'
  1006   000661  3A                 	db	58	;':'
  1007   000662  20                 	db	32
  1008   000663  00                 	db	0
  1009   000664                     STR_3:
  1010   000664  48                 	db	72	;'H'
  1011   000665  50                 	db	80	;'P'
  1012   000666  20                 	db	32
  1013   000667  42                 	db	66	;'B'
  1014   000668  79                 	db	121	;'y'
  1015   000669  70                 	db	112	;'p'
  1016   00066A  61                 	db	97	;'a'
  1017   00066B  73                 	db	115	;'s'
  1018   00066C  73                 	db	115	;'s'
  1019   00066D  00                 	db	0
  1020   00066E                     STR_7:
  1021   00066E  4C                 	db	76	;'L'
  1022   00066F  50                 	db	80	;'P'
  1023   000670  20                 	db	32
  1024   000671  42                 	db	66	;'B'
  1025   000672  79                 	db	121	;'y'
  1026   000673  70                 	db	112	;'p'
  1027   000674  61                 	db	97	;'a'
  1028   000675  73                 	db	115	;'s'
  1029   000676  73                 	db	115	;'s'
  1030   000677  00                 	db	0
  1031   000678                     STR_11:
  1032   000678  4D                 	db	77	;'M'
  1033   000679  61                 	db	97	;'a'
  1034   00067A  69                 	db	105	;'i'
  1035   00067B  6E                 	db	110	;'n'
  1036   00067C  20                 	db	32
  1037   00067D  4D                 	db	77	;'M'
  1038   00067E  65                 	db	101	;'e'
  1039   00067F  6E                 	db	110	;'n'
  1040   000680  75                 	db	117	;'u'
  1041   000681  00                 	db	0
  1042   000682                     STR_14:
  1043   000682  25                 	db	37
  1044   000683  64                 	db	100	;'d'
  1045   000684  20                 	db	32
  1046   000685  25                 	db	37
  1047   000686  73                 	db	115	;'s'
  1048   000687  00                 	db	0
  1049   000688                     STR_4:
  1050   000688  73                 	db	115	;'s'
  1051   000689  65                 	db	101	;'e'
  1052   00068A  63                 	db	99	;'c'
  1053   00068B  00                 	db	0
  1054   00068C                     STR_2:
  1055   00068C  70                 	db	112	;'p'
  1056   00068D  73                 	db	115	;'s'
  1057   00068E  69                 	db	105	;'i'
  1058   00068F  00                 	db	0
  1059   000690                     STR_12:
  1060   000690  3C                 	db	60	;'<'
  1061   000691  20                 	db	32
  1062   000692  00                 	db	0
  1063   00068C                     STR_6           equ	STR_2
  1064   000688                     STR_8           equ	STR_4
  1065   000693  00                 	db	0	; dummy byte at the end
  1066   000600                     __smallconst    set	__psmallconst
  1067   000600                     __mediumconst   set	__psmallconst
  1068   000002                     __activetblptr  equ	2
  1069                           
  1070                           ; #config settings
  1071                           
  1072                           	psect	cinit
  1073   0011EC                     __pcinit:
  1074                           	callstack 0
  1075   0011EC                     start_initialization:
  1076                           	callstack 0
  1077   0011EC                     __initialization:
  1078                           	callstack 0
  1079                           
  1080                           ; Initialize objects allocated to BANK0 (32 bytes)
  1081                           ; load TBLPTR registers with __pidataBANK0
  1082   0011EC  0EAE               	movlw	low __pidataBANK0
  1083   0011EE  6EF6               	movwf	tblptrl,c
  1084   0011F0  0E13               	movlw	high __pidataBANK0
  1085   0011F2  6EF7               	movwf	tblptrh,c
  1086   0011F4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1087   0011F6  6EF8               	movwf	tblptru,c
  1088   0011F8  EE00  F080         	lfsr	0,__pdataBANK0
  1089   0011FC  EE10 F020          	lfsr	1,32
  1090   001200                     copy_data0:
  1091   001200  0009               	tblrd		*+
  1092   001202  CFF5 FFEE          	movff	tablat,postinc0
  1093   001206  50E5               	movf	postdec1,w,c
  1094   001208  50E1               	movf	fsr1l,w,c
  1095   00120A  E1FA               	bnz	copy_data0
  1096                           
  1097                           ; Initialize objects allocated to COMRAM (1 bytes)
  1098                           ; load TBLPTR registers with __pidataCOMRAM
  1099   00120C  0E20               	movlw	low __pidataCOMRAM
  1100   00120E  6EF6               	movwf	tblptrl,c
  1101   001210  0E14               	movlw	high __pidataCOMRAM
  1102   001212  6EF7               	movwf	tblptrh,c
  1103   001214  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1104   001216  6EF8               	movwf	tblptru,c
  1105   001218  0009               	tblrd		*+	;fetch initializer
  1106   00121A  CFF5 F05C          	movff	tablat,__pdataCOMRAM
  1107                           
  1108                           ; Clear objects allocated to BANK0 (32 bytes)
  1109   00121E  EE00  F060         	lfsr	0,__pbssBANK0
  1110   001222  0E20               	movlw	32
  1111   001224                     clear_0:
  1112   001224  6AEE               	clrf	postinc0,c
  1113   001226  06E8               	decf	wreg,f,c
  1114   001228  E1FD               	bnz	clear_0
  1115                           
  1116                           ; Clear objects allocated to COMRAM (19 bytes)
  1117   00122A  EE00  F049         	lfsr	0,__pbssCOMRAM
  1118   00122E  0E13               	movlw	19
  1119   001230                     clear_1:
  1120   001230  6AEE               	clrf	postinc0,c
  1121   001232  06E8               	decf	wreg,f,c
  1122   001234  E1FD               	bnz	clear_1
  1123   001236                     end_of_initialization:
  1124                           	callstack 0
  1125   001236                     __end_of__initialization:
  1126                           	callstack 0
  1127   001236  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1128   001238  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1129   00123A  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1130   00123C  6EF8               	movwf	tblptru,c
  1131   00123E  0100               	movlb	0
  1132   001240  EFCE  F004         	goto	_main	;jump to C main() function
  1133                           
  1134                           	psect	bssCOMRAM
  1135   000049                     __pbssCOMRAM:
  1136                           	callstack 0
  1137   000049                     get_button@start_time:
  1138                           	callstack 0
  1139   000049                     	ds	4
  1140   00004D                     _ms_counter:
  1141                           	callstack 0
  1142   00004D                     	ds	4
  1143   000051                     _width:
  1144                           	callstack 0
  1145   000051                     	ds	2
  1146   000053                     _prec:
  1147                           	callstack 0
  1148   000053                     	ds	2
  1149   000055                     _temp_value:
  1150                           	callstack 0
  1151   000055                     	ds	2
  1152   000057                     _current_index:
  1153                           	callstack 0
  1154   000057                     	ds	2
  1155   000059                     _flags:
  1156                           	callstack 0
  1157   000059                     	ds	1
  1158   00005A                     _current_state:
  1159                           	callstack 0
  1160   00005A                     	ds	1
  1161   00005B                     get_encoder@last_state:
  1162                           	callstack 0
  1163   00005B                     	ds	1
  1164                           
  1165                           	psect	dataCOMRAM
  1166   00005C                     __pdataCOMRAM:
  1167                           	callstack 0
  1168   00005C                     get_button@last:
  1169                           	callstack 0
  1170   00005C                     	ds	1
  1171                           
  1172                           	psect	bssBANK0
  1173   000060                     __pbssBANK0:
  1174                           	callstack 0
  1175   000060                     _dbuf:
  1176                           	callstack 0
  1177   000060                     	ds	32
  1178                           
  1179                           	psect	dataBANK0
  1180   000080                     __pdataBANK0:
  1181                           	callstack 0
  1182   000080                     _params:
  1183                           	callstack 0
  1184   000080                     	ds	32
  1185                           
  1186                           	psect	cstackCOMRAM
  1187   000001                     __pcstackCOMRAM:
  1188                           	callstack 0
  1189   000001                     ?___awdiv:
  1190                           	callstack 0
  1191   000001                     ?___awmod:
  1192                           	callstack 0
  1193   000001                     get_button@res:
  1194                           	callstack 0
  1195   000001                     LCD_SendNibble@rs:
  1196                           	callstack 0
  1197   000001                     ___awdiv@dividend:
  1198                           	callstack 0
  1199   000001                     ___awmod@dividend:
  1200                           	callstack 0
  1201   000001                     fputc@c:
  1202                           	callstack 0
  1203   000001                     ??_get_encoder:
  1204   000001                     
  1205                           ; 1 bytes @ 0x0
  1206   000001                     	ds	1
  1207   000002                     get_button@duration:
  1208                           	callstack 0
  1209   000002                     ??_LCD_SendNibble:
  1210                           
  1211                           ; 1 bytes @ 0x1
  1212   000002                     	ds	1
  1213   000003                     get_encoder@dir:
  1214                           	callstack 0
  1215   000003                     LCD_SendNibble@nibble:
  1216                           	callstack 0
  1217   000003                     fputc@fp:
  1218                           	callstack 0
  1219   000003                     ___awdiv@divisor:
  1220                           	callstack 0
  1221   000003                     ___awmod@divisor:
  1222                           	callstack 0
  1223                           
  1224                           ; 2 bytes @ 0x2
  1225   000003                     	ds	1
  1226   000004                     get_encoder@current:
  1227                           	callstack 0
  1228   000004                     LCD_Command@cmd:
  1229                           	callstack 0
  1230   000004                     LCD_Data@data:
  1231                           	callstack 0
  1232   000004                     ??_fputc:
  1233   000004                     
  1234                           ; 1 bytes @ 0x3
  1235   000004                     	ds	1
  1236   000005                     LCD_SetCursor@col:
  1237                           	callstack 0
  1238   000005                     ___awdiv@counter:
  1239                           	callstack 0
  1240   000005                     ___awmod@counter:
  1241                           	callstack 0
  1242   000005                     LCD_String@str:
  1243                           	callstack 0
  1244   000005                     ??_LCD_Init:
  1245   000005                     ??_LCD_Clear:
  1246   000005                     
  1247                           ; 1 bytes @ 0x4
  1248   000005                     	ds	1
  1249   000006                     get_button@curr:
  1250                           	callstack 0
  1251   000006                     LCD_SetCursor@row:
  1252                           	callstack 0
  1253   000006                     ___awdiv@sign:
  1254                           	callstack 0
  1255   000006                     ___awmod@sign:
  1256                           	callstack 0
  1257   000006                     
  1258                           ; 1 bytes @ 0x5
  1259   000006                     	ds	1
  1260   000007                     ?_abs:
  1261                           	callstack 0
  1262   000007                     LCD_SetCursor@addr:
  1263                           	callstack 0
  1264   000007                     ___awdiv@quotient:
  1265                           	callstack 0
  1266   000007                     abs@a:
  1267                           	callstack 0
  1268   000007                     
  1269                           ; 1 bytes @ 0x6
  1270   000007                     	ds	1
  1271   000008                     ??_draw_menu:
  1272                           
  1273                           ; 1 bytes @ 0x7
  1274   000008                     	ds	1
  1275   000009                     draw_menu@i:
  1276                           	callstack 0
  1277   000009                     ??_abs:
  1278                           
  1279                           ; 1 bytes @ 0x8
  1280   000009                     	ds	2
  1281   00000B                     vfpfcnvrt@fp:
  1282                           	callstack 0
  1283                           
  1284                           ; 1 bytes @ 0xA
  1285   00000B                     	ds	1
  1286   00000C                     vfpfcnvrt@fmt:
  1287                           	callstack 0
  1288                           
  1289                           ; 1 bytes @ 0xB
  1290   00000C                     	ds	1
  1291   00000D                     vfpfcnvrt@ap:
  1292                           	callstack 0
  1293                           
  1294                           ; 2 bytes @ 0xC
  1295   00000D                     	ds	2
  1296   00000F                     ??_vfpfcnvrt:
  1297                           
  1298                           ; 1 bytes @ 0xE
  1299   00000F                     	ds	1
  1300   000010                     vfpfcnvrt@cp_1178:
  1301                           	callstack 0
  1302                           
  1303                           ; 2 bytes @ 0xF
  1304   000010                     	ds	2
  1305   000012                     vfpfcnvrt@done:
  1306                           	callstack 0
  1307                           
  1308                           ; 1 bytes @ 0x11
  1309   000012                     	ds	1
  1310   000013                     vfpfcnvrt@cp:
  1311                           	callstack 0
  1312                           
  1313                           ; 1 bytes @ 0x12
  1314   000013                     	ds	1
  1315   000014                     vfpfcnvrt@convarg:
  1316                           	callstack 0
  1317                           
  1318                           ; 4 bytes @ 0x13
  1319   000014                     	ds	4
  1320   000018                     vfpfcnvrt@c:
  1321                           	callstack 0
  1322                           
  1323                           ; 1 bytes @ 0x17
  1324   000018                     	ds	1
  1325   000019                     ?_vfprintf:
  1326                           	callstack 0
  1327   000019                     vfprintf@fp:
  1328                           	callstack 0
  1329                           
  1330                           ; 1 bytes @ 0x18
  1331   000019                     	ds	1
  1332   00001A                     vfprintf@fmt:
  1333                           	callstack 0
  1334                           
  1335                           ; 1 bytes @ 0x19
  1336   00001A                     	ds	1
  1337   00001B                     vfprintf@ap:
  1338                           	callstack 0
  1339                           
  1340                           ; 1 bytes @ 0x1A
  1341   00001B                     	ds	1
  1342   00001C                     vfprintf@cfmt:
  1343                           	callstack 0
  1344   00001C                     
  1345                           ; 1 bytes @ 0x1B
  1346   00001C                     	ds	1
  1347   00001D                     ?_sprintf:
  1348                           	callstack 0
  1349   00001D                     sprintf@s:
  1350                           	callstack 0
  1351                           
  1352                           ; 1 bytes @ 0x1C
  1353   00001D                     	ds	1
  1354   00001E                     sprintf@fmt:
  1355                           	callstack 0
  1356                           
  1357                           ; 1 bytes @ 0x1D
  1358   00001E                     	ds	5
  1359   000023                     sprintf@ap:
  1360                           	callstack 0
  1361   000023                     
  1362                           ; 1 bytes @ 0x22
  1363   000023                     	ds	1
  1364   000024                     sprintf@f:
  1365                           	callstack 0
  1366                           
  1367                           ; 11 bytes @ 0x23
  1368   000024                     	ds	11
  1369   00002F                     ??_draw_edit:
  1370                           
  1371                           ; 1 bytes @ 0x2E
  1372   00002F                     	ds	1
  1373   000030                     draw_edit@buf:
  1374                           	callstack 0
  1375                           
  1376                           ; 20 bytes @ 0x2F
  1377   000030                     	ds	20
  1378   000044                     ??_main:
  1379                           
  1380                           ; 1 bytes @ 0x43
  1381   000044                     	ds	3
  1382   000047                     main@enc:
  1383                           	callstack 0
  1384                           
  1385                           ; 1 bytes @ 0x46
  1386   000047                     	ds	1
  1387   000048                     main@btn:
  1388                           	callstack 0
  1389                           
  1390                           ; 1 bytes @ 0x47
  1391   000048                     	ds	1
  1392                           
  1393 ;;
  1394 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1395 ;;
  1396 ;; *************** function _main *****************
  1397 ;; Defined at:
  1398 ;;		line 125 in file "main.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;		None
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;  btn             1   71[COMRAM] unsigned char 
  1403 ;;  enc             1   70[COMRAM] unsigned char 
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  1    wreg      void 
  1406 ;; Registers used:
  1407 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1413 ;;      Params:         0       0       0       0       0       0       0
  1414 ;;      Locals:         2       0       0       0       0       0       0
  1415 ;;      Temps:          3       0       0       0       0       0       0
  1416 ;;      Totals:         5       0       0       0       0       0       0
  1417 ;;Total ram usage:        5 bytes
  1418 ;; Hardware stack levels required when called: 7
  1419 ;; This function calls:
  1420 ;;		_LCD_Init
  1421 ;;		_draw_edit
  1422 ;;		_draw_idle
  1423 ;;		_draw_menu
  1424 ;;		_get_button
  1425 ;;		_get_encoder
  1426 ;; This function is called by:
  1427 ;;		Startup code after reset
  1428 ;; This function uses a non-reentrant model
  1429 ;;
  1430                           
  1431                           	psect	text0
  1432   00099C                     __ptext0:
  1433                           	callstack 0
  1434   00099C                     _main:
  1435                           	callstack 24
  1436   00099C                     
  1437                           ;main.c: 126:                 if (btn == 1) {
  1438   00099C  0E70               	movlw	112
  1439   00099E  6ED3               	movwf	211,c	;volatile
  1440   0009A0                     
  1441                           ;main.c: 127:                     params[current_index].value = temp_value;
  1442   0009A0  9C9B               	bcf	155,6,c	;volatile
  1443   0009A2                     
  1444                           ;main.c: 128:                     current_state = MENU;
  1445   0009A2  010F               	movlb	15	; () banked
  1446   0009A4  6B38               	clrf	56,b	;volatile
  1447   0009A6                     
  1448                           ; BSR set to: 15
  1449                           ;main.c: 129:                     draw_menu();
  1450   0009A6  6B39               	clrf	57,b	;volatile
  1451   0009A8                     
  1452                           ; BSR set to: 15
  1453                           ;main.c: 130:                 }
  1454   0009A8  6B3A               	clrf	58,b	;volatile
  1455   0009AA                     
  1456                           ; BSR set to: 15
  1457                           ;main.c: 131:                 if (btn == 2) {
  1458   0009AA  6A92               	clrf	146,c	;volatile
  1459                           
  1460                           ;main.c: 132:                     current_state = IDLE;
  1461   0009AC  0E46               	movlw	70
  1462   0009AE  6E93               	movwf	147,c	;volatile
  1463   0009B0                     
  1464                           ; BSR set to: 15
  1465                           ;main.c: 133:                     draw_idle();
  1466   0009B0  6A80               	clrf	128,c	;volatile
  1467   0009B2                     
  1468                           ; BSR set to: 15
  1469                           ;main.c: 134:                 }
  1470   0009B2  6A81               	clrf	129,c	;volatile
  1471   0009B4                     
  1472                           ; BSR set to: 15
  1473                           ;main.c: 135:                 break;
  1474   0009B4  9EF1               	bcf	241,7,c	;volatile
  1475                           
  1476                           ;main.c: 138: }
  1477   0009B6  0E31               	movlw	49
  1478   0009B8  6ECD               	movwf	205,c	;volatile
  1479   0009BA                     
  1480                           ; BSR set to: 15
  1481   0009BA  809D               	bsf	157,0,c	;volatile
  1482   0009BC                     
  1483                           ; BSR set to: 15
  1484   0009BC  8CF2               	bsf	242,6,c	;volatile
  1485   0009BE                     
  1486                           ; BSR set to: 15
  1487   0009BE  8EF2               	bsf	242,7,c	;volatile
  1488   0009C0                     
  1489                           ; BSR set to: 15
  1490   0009C0  EC82  F008         	call	_LCD_Init	;wreg free
  1491   0009C4                     l1862:
  1492   0009C4  EC6E  F009         	call	_draw_idle	;wreg free
  1493   0009C8                     l1864:
  1494   0009C8  ECD3  F005         	call	_get_encoder	;wreg free
  1495   0009CC  6E47               	movwf	main@enc^0,c
  1496   0009CE  EC65  F006         	call	_get_button	;wreg free
  1497   0009D2  6E48               	movwf	main@btn^0,c
  1498   0009D4  EFB8  F005         	goto	l1928
  1499   0009D8                     l1868:
  1500   0009D8  0448               	decf	main@btn^0,w,c
  1501   0009DA  A4D8               	btfss	status,2,c
  1502   0009DC  EFF2  F004         	goto	u1331
  1503   0009E0  EFF4  F004         	goto	u1330
  1504   0009E4                     u1331:
  1505   0009E4  EFE4  F004         	goto	l1864
  1506   0009E8                     u1330:
  1507   0009E8  0E01               	movlw	1
  1508   0009EA  6E5A               	movwf	_current_state^0,c
  1509   0009EC  0E00               	movlw	0
  1510   0009EE  6E58               	movwf	(_current_index+1)^0,c
  1511   0009F0  0E00               	movlw	0
  1512   0009F2  6E57               	movwf	_current_index^0,c
  1513   0009F4  EC35  F008         	call	_draw_menu	;wreg free
  1514   0009F8  EFE4  F004         	goto	l1864
  1515   0009FC                     l1874:
  1516   0009FC  5047               	movf	main@enc^0,w,c
  1517   0009FE  B4D8               	btfsc	status,2,c
  1518   000A00  EF04  F005         	goto	u1341
  1519   000A04  EF06  F005         	goto	u1340
  1520   000A08                     u1341:
  1521   000A08  EF29  F005         	goto	l1886
  1522   000A0C                     u1340:
  1523   000A0C  5047               	movf	main@enc^0,w,c
  1524   000A0E  2657               	addwf	_current_index^0,f,c
  1525   000A10  0E00               	movlw	0
  1526   000A12  2258               	addwfc	(_current_index+1)^0,f,c
  1527   000A14  BE58               	btfsc	(_current_index+1)^0,7,c
  1528   000A16  EF11  F005         	goto	u1350
  1529   000A1A  EF0F  F005         	goto	u1351
  1530   000A1E                     u1351:
  1531   000A1E  EF15  F005         	goto	l1880
  1532   000A22                     u1350:
  1533   000A22  0E00               	movlw	0
  1534   000A24  6E58               	movwf	(_current_index+1)^0,c
  1535   000A26  0E03               	movlw	3
  1536   000A28  6E57               	movwf	_current_index^0,c
  1537   000A2A                     l1880:
  1538   000A2A  BE58               	btfsc	(_current_index+1)^0,7,c
  1539   000A2C  EF21  F005         	goto	u1361
  1540   000A30  5058               	movf	(_current_index+1)^0,w,c
  1541   000A32  E109               	bnz	u1360
  1542   000A34  0E04               	movlw	4
  1543   000A36  5C57               	subwf	_current_index^0,w,c
  1544   000A38  A0D8               	btfss	status,0,c
  1545   000A3A  EF21  F005         	goto	u1361
  1546   000A3E  EF23  F005         	goto	u1360
  1547   000A42                     u1361:
  1548   000A42  EF27  F005         	goto	l1884
  1549   000A46                     u1360:
  1550   000A46  0E00               	movlw	0
  1551   000A48  6E58               	movwf	(_current_index+1)^0,c
  1552   000A4A  0E00               	movlw	0
  1553   000A4C  6E57               	movwf	_current_index^0,c
  1554   000A4E                     l1884:
  1555   000A4E  EC35  F008         	call	_draw_menu	;wreg free
  1556   000A52                     l1886:
  1557   000A52  0448               	decf	main@btn^0,w,c
  1558   000A54  A4D8               	btfss	status,2,c
  1559   000A56  EF2F  F005         	goto	u1371
  1560   000A5A  EF31  F005         	goto	u1370
  1561   000A5E                     u1371:
  1562   000A5E  EF3F  F005         	goto	l1894
  1563   000A62                     u1370:
  1564   000A62  5057               	movf	_current_index^0,w,c
  1565   000A64  0D08               	mullw	8
  1566   000A66  50F3               	movf	243,w,c
  1567   000A68  0F81               	addlw	low (_params+1)
  1568   000A6A  6ED9               	movwf	fsr2l,c
  1569   000A6C  6ADA               	clrf	fsr2h,c
  1570   000A6E  CFDE F055          	movff	postinc2,_temp_value
  1571   000A72  CFDD F056          	movff	postdec2,_temp_value+1
  1572   000A76  0E02               	movlw	2
  1573   000A78  6E5A               	movwf	_current_state^0,c
  1574   000A7A  EC32  F007         	call	_draw_edit	;wreg free
  1575   000A7E                     l1894:
  1576   000A7E  0E02               	movlw	2
  1577   000A80  1848               	xorwf	main@btn^0,w,c
  1578   000A82  A4D8               	btfss	status,2,c
  1579   000A84  EF46  F005         	goto	u1381
  1580   000A88  EF48  F005         	goto	u1380
  1581   000A8C                     u1381:
  1582   000A8C  EFE4  F004         	goto	l1864
  1583   000A90                     u1380:
  1584   000A90                     l1896:
  1585   000A90  6A5A               	clrf	_current_state^0,c
  1586   000A92  EFE2  F004         	goto	l1862
  1587   000A96                     l1900:
  1588   000A96  5047               	movf	main@enc^0,w,c
  1589   000A98  B4D8               	btfsc	status,2,c
  1590   000A9A  EF51  F005         	goto	u1391
  1591   000A9E  EF53  F005         	goto	u1390
  1592   000AA2                     u1391:
  1593   000AA2  EF97  F005         	goto	l1912
  1594   000AA6                     u1390:
  1595   000AA6  5047               	movf	main@enc^0,w,c
  1596   000AA8  2655               	addwf	_temp_value^0,f,c
  1597   000AAA  0E00               	movlw	0
  1598   000AAC  2256               	addwfc	(_temp_value+1)^0,f,c
  1599   000AAE  5057               	movf	_current_index^0,w,c
  1600   000AB0  0D08               	mullw	8
  1601   000AB2  50F3               	movf	243,w,c
  1602   000AB4  0F83               	addlw	low (_params+3)
  1603   000AB6  6ED9               	movwf	fsr2l,c
  1604   000AB8  6ADA               	clrf	fsr2h,c
  1605   000ABA  50DE               	movf	postinc2,w,c
  1606   000ABC  5C55               	subwf	_temp_value^0,w,c
  1607   000ABE  5056               	movf	(_temp_value+1)^0,w,c
  1608   000AC0  0A80               	xorlw	128
  1609   000AC2  6E46               	movwf	(??_main+2)^0,c
  1610   000AC4  50DE               	movf	postinc2,w,c
  1611   000AC6  0A80               	xorlw	128
  1612   000AC8  5846               	subwfb	(??_main+2)^0,w,c
  1613   000ACA  B0D8               	btfsc	status,0,c
  1614   000ACC  EF6A  F005         	goto	u1401
  1615   000AD0  EF6C  F005         	goto	u1400
  1616   000AD4                     u1401:
  1617   000AD4  EF76  F005         	goto	l172
  1618   000AD8                     u1400:
  1619   000AD8  5057               	movf	_current_index^0,w,c
  1620   000ADA  0D08               	mullw	8
  1621   000ADC  50F3               	movf	243,w,c
  1622   000ADE  0F83               	addlw	low (_params+3)
  1623   000AE0  6ED9               	movwf	fsr2l,c
  1624   000AE2  6ADA               	clrf	fsr2h,c
  1625   000AE4  CFDE F055          	movff	postinc2,_temp_value
  1626   000AE8  CFDD F056          	movff	postdec2,_temp_value+1
  1627   000AEC                     l172:
  1628   000AEC  5057               	movf	_current_index^0,w,c
  1629   000AEE  0D08               	mullw	8
  1630   000AF0  50F3               	movf	243,w,c
  1631   000AF2  0F85               	addlw	low (_params+5)
  1632   000AF4  6ED9               	movwf	fsr2l,c
  1633   000AF6  6ADA               	clrf	fsr2h,c
  1634   000AF8  5055               	movf	_temp_value^0,w,c
  1635   000AFA  5CDE               	subwf	postinc2,w,c
  1636   000AFC  50DE               	movf	postinc2,w,c
  1637   000AFE  0A80               	xorlw	128
  1638   000B00  6E46               	movwf	(??_main+2)^0,c
  1639   000B02  5056               	movf	(_temp_value+1)^0,w,c
  1640   000B04  0A80               	xorlw	128
  1641   000B06  5846               	subwfb	(??_main+2)^0,w,c
  1642   000B08  B0D8               	btfsc	status,0,c
  1643   000B0A  EF89  F005         	goto	u1411
  1644   000B0E  EF8B  F005         	goto	u1410
  1645   000B12                     u1411:
  1646   000B12  EF95  F005         	goto	l1910
  1647   000B16                     u1410:
  1648   000B16  5057               	movf	_current_index^0,w,c
  1649   000B18  0D08               	mullw	8
  1650   000B1A  50F3               	movf	243,w,c
  1651   000B1C  0F85               	addlw	low (_params+5)
  1652   000B1E  6ED9               	movwf	fsr2l,c
  1653   000B20  6ADA               	clrf	fsr2h,c
  1654   000B22  CFDE F055          	movff	postinc2,_temp_value
  1655   000B26  CFDD F056          	movff	postdec2,_temp_value+1
  1656   000B2A                     l1910:
  1657   000B2A  EC32  F007         	call	_draw_edit	;wreg free
  1658   000B2E                     l1912:
  1659   000B2E  0448               	decf	main@btn^0,w,c
  1660   000B30  A4D8               	btfss	status,2,c
  1661   000B32  EF9D  F005         	goto	u1421
  1662   000B36  EF9F  F005         	goto	u1420
  1663   000B3A                     u1421:
  1664   000B3A  EFAD  F005         	goto	l1920
  1665   000B3E                     u1420:
  1666   000B3E  5057               	movf	_current_index^0,w,c
  1667   000B40  0D08               	mullw	8
  1668   000B42  50F3               	movf	243,w,c
  1669   000B44  0F81               	addlw	low (_params+1)
  1670   000B46  6ED9               	movwf	fsr2l,c
  1671   000B48  6ADA               	clrf	fsr2h,c
  1672   000B4A  C055  FFDE         	movff	_temp_value,postinc2
  1673   000B4E  C056  FFDD         	movff	_temp_value+1,postdec2
  1674   000B52  0E01               	movlw	1
  1675   000B54  6E5A               	movwf	_current_state^0,c
  1676   000B56  EC35  F008         	call	_draw_menu	;wreg free
  1677   000B5A                     l1920:
  1678   000B5A  0E02               	movlw	2
  1679   000B5C  1848               	xorwf	main@btn^0,w,c
  1680   000B5E  A4D8               	btfss	status,2,c
  1681   000B60  EFB4  F005         	goto	u1431
  1682   000B64  EFB6  F005         	goto	u1430
  1683   000B68                     u1431:
  1684   000B68  EFE4  F004         	goto	l1864
  1685   000B6C                     u1430:
  1686   000B6C  EF48  F005         	goto	l1896
  1687   000B70                     l1928:
  1688   000B70  505A               	movf	_current_state^0,w,c
  1689   000B72  6E44               	movwf	??_main^0,c
  1690   000B74  6A45               	clrf	(??_main+1)^0,c
  1691                           
  1692                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1693                           ; Switch size 1, requested type "simple"
  1694                           ; Number of cases is 1, Range of values is 0 to 0
  1695                           ; switch strategies available:
  1696                           ; Name         Instructions Cycles
  1697                           ; simple_byte            4     3 (average)
  1698                           ;	Chosen strategy is simple_byte
  1699   000B76  5045               	movf	(??_main+1)^0,w,c
  1700   000B78  0A00               	xorlw	0	; case 0
  1701   000B7A  B4D8               	btfsc	status,2,c
  1702   000B7C  EFC2  F005         	goto	l1966
  1703   000B80  EFE4  F004         	goto	l1864
  1704   000B84                     l1966:
  1705                           
  1706                           ; Switch size 1, requested type "simple"
  1707                           ; Number of cases is 3, Range of values is 0 to 2
  1708                           ; switch strategies available:
  1709                           ; Name         Instructions Cycles
  1710                           ; simple_byte           10     6 (average)
  1711                           ;	Chosen strategy is simple_byte
  1712   000B84  5044               	movf	??_main^0,w,c
  1713   000B86  0A00               	xorlw	0	; case 0
  1714   000B88  B4D8               	btfsc	status,2,c
  1715   000B8A  EFEC  F004         	goto	l1868
  1716   000B8E  0A01               	xorlw	1	; case 1
  1717   000B90  B4D8               	btfsc	status,2,c
  1718   000B92  EFFE  F004         	goto	l1874
  1719   000B96  0A03               	xorlw	3	; case 2
  1720   000B98  B4D8               	btfsc	status,2,c
  1721   000B9A  EF4B  F005         	goto	l1900
  1722   000B9E  EFE4  F004         	goto	l1864
  1723   000BA2  EF19  F000         	goto	start
  1724   000BA6                     __end_of_main:
  1725                           	callstack 0
  1726                           
  1727 ;; *************** function _get_encoder *****************
  1728 ;; Defined at:
  1729 ;;		line 18 in file "encoder.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  current         1    3[COMRAM] unsigned char 
  1734 ;;  dir             1    2[COMRAM] unsigned char 
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  1    wreg      unsigned char 
  1737 ;; Registers used:
  1738 ;;		wreg, status,2, status,0
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1744 ;;      Params:         0       0       0       0       0       0       0
  1745 ;;      Locals:         2       0       0       0       0       0       0
  1746 ;;      Temps:          2       0       0       0       0       0       0
  1747 ;;      Totals:         4       0       0       0       0       0       0
  1748 ;;Total ram usage:        4 bytes
  1749 ;; Hardware stack levels used: 1
  1750 ;; Hardware stack levels required when called: 1
  1751 ;; This function calls:
  1752 ;;		Nothing
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text1
  1759   000BA6                     __ptext1:
  1760                           	callstack 0
  1761   000BA6                     _get_encoder:
  1762                           	callstack 29
  1763   000BA6                     
  1764                           ;encoder.c: 19:     static unsigned char last_state = 0;;encoder.c: 20:     unsigned cha
      +                          r current = (unsigned char)((PORTBbits.RB2 << 1) | PORTBbits.RB1);
  1765   000BA6  B281               	btfsc	129,1,c	;volatile
  1766   000BA8  EFD8  F005         	goto	u1131
  1767   000BAC  EFDC  F005         	goto	u1130
  1768   000BB0                     u1131:
  1769   000BB0  6A01               	clrf	??_get_encoder^0,c
  1770   000BB2  2A01               	incf	??_get_encoder^0,f,c
  1771   000BB4  EFDD  F005         	goto	u1138
  1772   000BB8                     u1130:
  1773   000BB8  6A01               	clrf	??_get_encoder^0,c
  1774   000BBA                     u1138:
  1775   000BBA  B481               	btfsc	129,2,c	;volatile
  1776   000BBC  EFE2  F005         	goto	u1141
  1777   000BC0  EFE6  F005         	goto	u1140
  1778   000BC4                     u1141:
  1779   000BC4  6A02               	clrf	(??_get_encoder+1)^0,c
  1780   000BC6  2A02               	incf	(??_get_encoder+1)^0,f,c
  1781   000BC8  EFE7  F005         	goto	u1148
  1782   000BCC                     u1140:
  1783   000BCC  6A02               	clrf	(??_get_encoder+1)^0,c
  1784   000BCE                     u1148:
  1785   000BCE  90D8               	bcf	status,0,c
  1786   000BD0  3402               	rlcf	(??_get_encoder+1)^0,w,c
  1787   000BD2  1001               	iorwf	??_get_encoder^0,w,c
  1788   000BD4  6E04               	movwf	get_encoder@current^0,c
  1789   000BD6                     
  1790                           ;encoder.c: 21:     char dir = 0;
  1791   000BD6  6A03               	clrf	get_encoder@dir^0,c
  1792                           
  1793                           ;encoder.c: 22:     if (current != last_state) {
  1794   000BD8  505B               	movf	get_encoder@last_state^0,w,c
  1795   000BDA  1804               	xorwf	get_encoder@current^0,w,c
  1796   000BDC  B4D8               	btfsc	status,2,c
  1797   000BDE  EFF3  F005         	goto	u1151
  1798   000BE2  EFF5  F005         	goto	u1150
  1799   000BE6                     u1151:
  1800   000BE6  EF63  F006         	goto	l1742
  1801   000BEA                     u1150:
  1802   000BEA  EF4E  F006         	goto	l1740
  1803   000BEE                     l1706:
  1804   000BEE  0404               	decf	get_encoder@current^0,w,c
  1805   000BF0  A4D8               	btfss	status,2,c
  1806   000BF2  EFFD  F005         	goto	u1161
  1807   000BF6  EFFF  F005         	goto	u1160
  1808   000BFA                     u1161:
  1809   000BFA  EF03  F006         	goto	l1710
  1810   000BFE                     u1160:
  1811   000BFE                     l1708:
  1812   000BFE  0E01               	movlw	1
  1813   000C00  6E03               	movwf	get_encoder@dir^0,c
  1814   000C02  EF61  F006         	goto	l15
  1815   000C06                     l1710:
  1816   000C06  0E02               	movlw	2
  1817   000C08  1804               	xorwf	get_encoder@current^0,w,c
  1818   000C0A  A4D8               	btfss	status,2,c
  1819   000C0C  EF0A  F006         	goto	u1171
  1820   000C10  EF0C  F006         	goto	u1170
  1821   000C14                     u1171:
  1822   000C14  EF61  F006         	goto	l15
  1823   000C18                     u1170:
  1824   000C18                     l1712:
  1825   000C18  6803               	setf	get_encoder@dir^0,c
  1826   000C1A  EF61  F006         	goto	l15
  1827   000C1E                     l1714:
  1828   000C1E  0E03               	movlw	3
  1829   000C20  1804               	xorwf	get_encoder@current^0,w,c
  1830   000C22  A4D8               	btfss	status,2,c
  1831   000C24  EF16  F006         	goto	u1181
  1832   000C28  EF18  F006         	goto	u1180
  1833   000C2C                     u1181:
  1834   000C2C  EF1A  F006         	goto	l1718
  1835   000C30                     u1180:
  1836   000C30  EFFF  F005         	goto	l1708
  1837   000C34                     l1718:
  1838   000C34  5004               	movf	get_encoder@current^0,w,c
  1839   000C36  A4D8               	btfss	status,2,c
  1840   000C38  EF20  F006         	goto	u1191
  1841   000C3C  EF22  F006         	goto	u1190
  1842   000C40                     u1191:
  1843   000C40  EF61  F006         	goto	l15
  1844   000C44                     u1190:
  1845   000C44  EF0C  F006         	goto	l1712
  1846   000C48                     l1722:
  1847   000C48  5004               	movf	get_encoder@current^0,w,c
  1848   000C4A  A4D8               	btfss	status,2,c
  1849   000C4C  EF2A  F006         	goto	u1201
  1850   000C50  EF2C  F006         	goto	u1200
  1851   000C54                     u1201:
  1852   000C54  EF2E  F006         	goto	l1726
  1853   000C58                     u1200:
  1854   000C58  EFFF  F005         	goto	l1708
  1855   000C5C                     l1726:
  1856   000C5C  0E03               	movlw	3
  1857   000C5E  1804               	xorwf	get_encoder@current^0,w,c
  1858   000C60  A4D8               	btfss	status,2,c
  1859   000C62  EF35  F006         	goto	u1211
  1860   000C66  EF37  F006         	goto	u1210
  1861   000C6A                     u1211:
  1862   000C6A  EF61  F006         	goto	l15
  1863   000C6E                     u1210:
  1864   000C6E  EF0C  F006         	goto	l1712
  1865   000C72                     l1730:
  1866   000C72  0E02               	movlw	2
  1867   000C74  1804               	xorwf	get_encoder@current^0,w,c
  1868   000C76  A4D8               	btfss	status,2,c
  1869   000C78  EF40  F006         	goto	u1221
  1870   000C7C  EF42  F006         	goto	u1220
  1871   000C80                     u1221:
  1872   000C80  EF44  F006         	goto	l1734
  1873   000C84                     u1220:
  1874   000C84  EFFF  F005         	goto	l1708
  1875   000C88                     l1734:
  1876   000C88  0404               	decf	get_encoder@current^0,w,c
  1877   000C8A  A4D8               	btfss	status,2,c
  1878   000C8C  EF4A  F006         	goto	u1231
  1879   000C90  EF4C  F006         	goto	u1230
  1880   000C94                     u1231:
  1881   000C94  EF61  F006         	goto	l15
  1882   000C98                     u1230:
  1883   000C98  EF0C  F006         	goto	l1712
  1884   000C9C                     l1740:
  1885   000C9C  505B               	movf	get_encoder@last_state^0,w,c
  1886                           
  1887                           ; Switch size 1, requested type "simple"
  1888                           ; Number of cases is 4, Range of values is 0 to 3
  1889                           ; switch strategies available:
  1890                           ; Name         Instructions Cycles
  1891                           ; simple_byte           13     7 (average)
  1892                           ;	Chosen strategy is simple_byte
  1893   000C9E  0A00               	xorlw	0	; case 0
  1894   000CA0  B4D8               	btfsc	status,2,c
  1895   000CA2  EFF7  F005         	goto	l1706
  1896   000CA6  0A01               	xorlw	1	; case 1
  1897   000CA8  B4D8               	btfsc	status,2,c
  1898   000CAA  EF0F  F006         	goto	l1714
  1899   000CAE  0A03               	xorlw	3	; case 2
  1900   000CB0  B4D8               	btfsc	status,2,c
  1901   000CB2  EF24  F006         	goto	l1722
  1902   000CB6  0A01               	xorlw	1	; case 3
  1903   000CB8  B4D8               	btfsc	status,2,c
  1904   000CBA  EF39  F006         	goto	l1730
  1905   000CBE  EF61  F006         	goto	l15
  1906   000CC2                     l15:
  1907                           
  1908                           ;encoder.c: 29:         last_state = current;
  1909   000CC2  C004  F05B         	movff	get_encoder@current,get_encoder@last_state
  1910   000CC6                     l1742:
  1911                           
  1912                           ;encoder.c: 31:     return dir;
  1913   000CC6  5003               	movf	get_encoder@dir^0,w,c
  1914   000CC8  0012               	return		;funcret
  1915   000CCA                     __end_of_get_encoder:
  1916                           	callstack 0
  1917                           
  1918 ;; *************** function _get_button *****************
  1919 ;; Defined at:
  1920 ;;		line 35 in file "encoder.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;		None
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;  duration        4    1[COMRAM] unsigned long 
  1925 ;;  curr            1    5[COMRAM] unsigned char 
  1926 ;;  res             1    0[COMRAM] unsigned char 
  1927 ;; Return value:  Size  Location     Type
  1928 ;;                  1    wreg      unsigned char 
  1929 ;; Registers used:
  1930 ;;		wreg, status,2, status,0
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1936 ;;      Params:         0       0       0       0       0       0       0
  1937 ;;      Locals:         6       0       0       0       0       0       0
  1938 ;;      Temps:          0       0       0       0       0       0       0
  1939 ;;      Totals:         6       0       0       0       0       0       0
  1940 ;;Total ram usage:        6 bytes
  1941 ;; Hardware stack levels used: 1
  1942 ;; Hardware stack levels required when called: 1
  1943 ;; This function calls:
  1944 ;;		Nothing
  1945 ;; This function is called by:
  1946 ;;		_main
  1947 ;; This function uses a non-reentrant model
  1948 ;;
  1949                           
  1950                           	psect	text2
  1951   000CCA                     __ptext2:
  1952                           	callstack 0
  1953   000CCA                     _get_button:
  1954                           	callstack 29
  1955   000CCA                     
  1956                           ;encoder.c: 36:     static unsigned long start_time = 0;;encoder.c: 37:     static char 
      +                          last = 1;;encoder.c: 38:     char curr = PORTBbits.RB6;
  1957   000CCA  0E00               	movlw	0
  1958   000CCC  BC81               	btfsc	129,6,c	;volatile
  1959   000CCE  0E01               	movlw	1
  1960   000CD0  6E06               	movwf	get_button@curr^0,c
  1961   000CD2                     
  1962                           ;encoder.c: 39:     char res = 0;
  1963   000CD2  6A01               	clrf	get_button@res^0,c
  1964   000CD4                     
  1965                           ;encoder.c: 40:     if (curr == 0 && last == 1) {
  1966   000CD4  5006               	movf	get_button@curr^0,w,c
  1967   000CD6  A4D8               	btfss	status,2,c
  1968   000CD8  EF70  F006         	goto	u1241
  1969   000CDC  EF72  F006         	goto	u1240
  1970   000CE0                     u1241:
  1971   000CE0  EF82  F006         	goto	l1756
  1972   000CE4                     u1240:
  1973   000CE4  045C               	decf	get_button@last^0,w,c
  1974   000CE6  A4D8               	btfss	status,2,c
  1975   000CE8  EF78  F006         	goto	u1251
  1976   000CEC  EF7A  F006         	goto	u1250
  1977   000CF0                     u1251:
  1978   000CF0  EF82  F006         	goto	l1756
  1979   000CF4                     u1250:
  1980   000CF4                     
  1981                           ;encoder.c: 41:         start_time = ms_counter;
  1982   000CF4  C04D  F049         	movff	_ms_counter,get_button@start_time	;volatile
  1983   000CF8  C04E  F04A         	movff	_ms_counter+1,get_button@start_time+1	;volatile
  1984   000CFC  C04F  F04B         	movff	_ms_counter+2,get_button@start_time+2	;volatile
  1985   000D00  C050  F04C         	movff	_ms_counter+3,get_button@start_time+3	;volatile
  1986   000D04                     l1756:
  1987                           
  1988                           ;encoder.c: 43:     if (curr == 1 && last == 0) {
  1989   000D04  0406               	decf	get_button@curr^0,w,c
  1990   000D06  A4D8               	btfss	status,2,c
  1991   000D08  EF88  F006         	goto	u1261
  1992   000D0C  EF8A  F006         	goto	u1260
  1993   000D10                     u1261:
  1994   000D10  EFCD  F006         	goto	l1770
  1995   000D14                     u1260:
  1996   000D14  505C               	movf	get_button@last^0,w,c
  1997   000D16  A4D8               	btfss	status,2,c
  1998   000D18  EF90  F006         	goto	u1271
  1999   000D1C  EF92  F006         	goto	u1270
  2000   000D20                     u1271:
  2001   000D20  EFCD  F006         	goto	l1770
  2002   000D24                     u1270:
  2003   000D24                     
  2004                           ;encoder.c: 44:         unsigned long duration = ms_counter - start_time;
  2005   000D24  5049               	movf	get_button@start_time^0,w,c
  2006   000D26  5C4D               	subwf	_ms_counter^0,w,c	;volatile
  2007   000D28  6E02               	movwf	get_button@duration^0,c
  2008   000D2A  504A               	movf	(get_button@start_time+1)^0,w,c
  2009   000D2C  584E               	subwfb	(_ms_counter+1)^0,w,c	;volatile
  2010   000D2E  6E03               	movwf	(get_button@duration+1)^0,c
  2011   000D30  504B               	movf	(get_button@start_time+2)^0,w,c
  2012   000D32  584F               	subwfb	(_ms_counter+2)^0,w,c	;volatile
  2013   000D34  6E04               	movwf	(get_button@duration+2)^0,c
  2014   000D36  504C               	movf	(get_button@start_time+3)^0,w,c
  2015   000D38  5850               	subwfb	(_ms_counter+3)^0,w,c	;volatile
  2016   000D3A  6E05               	movwf	(get_button@duration+3)^0,c
  2017                           
  2018                           ;encoder.c: 45:         if (duration > 20 && duration < 2000) res = 1;
  2019   000D3C  5005               	movf	(get_button@duration+3)^0,w,c
  2020   000D3E  1004               	iorwf	(get_button@duration+2)^0,w,c
  2021   000D40  1003               	iorwf	(get_button@duration+1)^0,w,c
  2022   000D42  E109               	bnz	u1280
  2023   000D44  0E15               	movlw	21
  2024   000D46  5C02               	subwf	get_button@duration^0,w,c
  2025   000D48  A0D8               	btfss	status,0,c
  2026   000D4A  EFA9  F006         	goto	u1281
  2027   000D4E  EFAB  F006         	goto	u1280
  2028   000D52                     u1281:
  2029   000D52  EFBD  F006         	goto	l1766
  2030   000D56                     u1280:
  2031   000D56  5005               	movf	(get_button@duration+3)^0,w,c
  2032   000D58  1004               	iorwf	(get_button@duration+2)^0,w,c
  2033   000D5A  E109               	bnz	u1291
  2034   000D5C  0ED0               	movlw	208
  2035   000D5E  5C02               	subwf	get_button@duration^0,w,c
  2036   000D60  0E07               	movlw	7
  2037   000D62  5803               	subwfb	(get_button@duration+1)^0,w,c
  2038   000D64  B0D8               	btfsc	status,0,c
  2039   000D66  EFB7  F006         	goto	u1291
  2040   000D6A  EFB9  F006         	goto	u1290
  2041   000D6E                     u1291:
  2042   000D6E  EFBD  F006         	goto	l1766
  2043   000D72                     u1290:
  2044   000D72  0E01               	movlw	1
  2045   000D74  6E01               	movwf	get_button@res^0,c
  2046   000D76  EFCD  F006         	goto	l1770
  2047   000D7A                     l1766:
  2048   000D7A  5005               	movf	(get_button@duration+3)^0,w,c
  2049   000D7C  1004               	iorwf	(get_button@duration+2)^0,w,c
  2050   000D7E  E10B               	bnz	u1300
  2051   000D80  0ED0               	movlw	208
  2052   000D82  5C02               	subwf	get_button@duration^0,w,c
  2053   000D84  0E07               	movlw	7
  2054   000D86  5803               	subwfb	(get_button@duration+1)^0,w,c
  2055   000D88  A0D8               	btfss	status,0,c
  2056   000D8A  EFC9  F006         	goto	u1301
  2057   000D8E  EFCB  F006         	goto	u1300
  2058   000D92                     u1301:
  2059   000D92  EFCD  F006         	goto	l1770
  2060   000D96                     u1300:
  2061   000D96  0E02               	movlw	2
  2062   000D98  6E01               	movwf	get_button@res^0,c
  2063   000D9A                     l1770:
  2064                           
  2065                           ;encoder.c: 48:     last = curr;
  2066   000D9A  C006  F05C         	movff	get_button@curr,get_button@last
  2067                           
  2068                           ;encoder.c: 49:     return res;
  2069   000D9E  5001               	movf	get_button@res^0,w,c
  2070   000DA0  0012               	return		;funcret
  2071   000DA2                     __end_of_get_button:
  2072                           	callstack 0
  2073                           
  2074 ;; *************** function _draw_menu *****************
  2075 ;; Defined at:
  2076 ;;		line 86 in file "main.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;		None
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  i               2    8[COMRAM] int 
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  1    wreg      void 
  2083 ;; Registers used:
  2084 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2090 ;;      Params:         0       0       0       0       0       0       0
  2091 ;;      Locals:         2       0       0       0       0       0       0
  2092 ;;      Temps:          1       0       0       0       0       0       0
  2093 ;;      Totals:         3       0       0       0       0       0       0
  2094 ;;Total ram usage:        3 bytes
  2095 ;; Hardware stack levels used: 1
  2096 ;; Hardware stack levels required when called: 4
  2097 ;; This function calls:
  2098 ;;		_LCD_Clear
  2099 ;;		_LCD_Data
  2100 ;;		_LCD_SetCursor
  2101 ;;		_LCD_String
  2102 ;; This function is called by:
  2103 ;;		_main
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text3
  2108   00106A                     __ptext3:
  2109                           	callstack 0
  2110   00106A                     _draw_menu:
  2111                           	callstack 26
  2112   00106A                     
  2113                           ;main.c: 87:     LCD_Init();
  2114   00106A  EC03  F00A         	call	_LCD_Clear	;wreg free
  2115                           
  2116                           ;main.c: 88:     draw_idle();
  2117   00106E  0E00               	movlw	0
  2118   001070  6E05               	movwf	LCD_SetCursor@col^0,c
  2119   001072  0E00               	movlw	0
  2120   001074  EC22  F009         	call	_LCD_SetCursor
  2121   001078                     
  2122                           ;main.c: 89: 
  2123   001078  0E78               	movlw	low STR_11
  2124   00107A  6E05               	movwf	LCD_String@str^0,c
  2125   00107C  5005               	movf	LCD_String@str^0,w,c
  2126   00107E  A4D8               	btfss	status,2,c
  2127   001080  0E06               	movlw	high __smallconst
  2128   001082  6E06               	movwf	(LCD_String@str+1)^0,c
  2129   001084  ECC7  F008         	call	_LCD_String	;wreg free
  2130   001088                     
  2131                           ;main.c: 90:     while (1) {
  2132   001088  0E00               	movlw	0
  2133   00108A  6E0A               	movwf	(draw_menu@i+1)^0,c
  2134   00108C  0E00               	movlw	0
  2135   00108E  6E09               	movwf	draw_menu@i^0,c
  2136   001090                     l1806:
  2137                           
  2138                           ;main.c: 91:         char enc = get_encoder();
  2139   001090  0E00               	movlw	0
  2140   001092  6E05               	movwf	LCD_SetCursor@col^0,c
  2141   001094  2809               	incf	draw_menu@i^0,w,c
  2142   001096  EC22  F009         	call	_LCD_SetCursor
  2143   00109A                     
  2144                           ;main.c: 92:         char btn = get_button();
  2145   00109A  5057               	movf	_current_index^0,w,c
  2146   00109C  1809               	xorwf	draw_menu@i^0,w,c
  2147   00109E  E107               	bnz	u1311
  2148   0010A0  5058               	movf	(_current_index+1)^0,w,c
  2149   0010A2  180A               	xorwf	(draw_menu@i+1)^0,w,c
  2150   0010A4  A4D8               	btfss	status,2,c
  2151   0010A6  EF57  F008         	goto	u1311
  2152   0010AA  EF59  F008         	goto	u1310
  2153   0010AE                     u1311:
  2154   0010AE  EF5E  F008         	goto	l1812
  2155   0010B2                     u1310:
  2156   0010B2  0E3E               	movlw	62
  2157   0010B4  ECE7  F009         	call	_LCD_Data
  2158   0010B8  EF61  F008         	goto	l1814
  2159   0010BC                     l1812:
  2160   0010BC  0E20               	movlw	32
  2161   0010BE  ECE7  F009         	call	_LCD_Data
  2162   0010C2                     l1814:
  2163                           
  2164                           ;main.c: 94:         switch (current_state) {
  2165   0010C2  5009               	movf	draw_menu@i^0,w,c
  2166   0010C4  0D08               	mullw	8
  2167   0010C6  50F3               	movf	243,w,c
  2168   0010C8  0F80               	addlw	low _params
  2169   0010CA  6ED9               	movwf	fsr2l,c
  2170   0010CC  6ADA               	clrf	fsr2h,c
  2171   0010CE  50DF               	movf	indf2,w,c
  2172   0010D0  6E08               	movwf	??_draw_menu^0,c
  2173   0010D2  C008  F005         	movff	??_draw_menu,LCD_String@str
  2174   0010D6  5005               	movf	LCD_String@str^0,w,c
  2175   0010D8  A4D8               	btfss	status,2,c
  2176   0010DA  0E06               	movlw	high __smallconst
  2177   0010DC  6E06               	movwf	(LCD_String@str+1)^0,c
  2178   0010DE  ECC7  F008         	call	_LCD_String	;wreg free
  2179   0010E2                     
  2180                           ;main.c: 95:             case IDLE:
  2181   0010E2  4A09               	infsnz	draw_menu@i^0,f,c
  2182   0010E4  2A0A               	incf	(draw_menu@i+1)^0,f,c
  2183   0010E6  BE0A               	btfsc	(draw_menu@i+1)^0,7,c
  2184   0010E8  EF7F  F008         	goto	u1321
  2185   0010EC  500A               	movf	(draw_menu@i+1)^0,w,c
  2186   0010EE  E109               	bnz	u1320
  2187   0010F0  0E04               	movlw	4
  2188   0010F2  5C09               	subwf	draw_menu@i^0,w,c
  2189   0010F4  A0D8               	btfss	status,0,c
  2190   0010F6  EF7F  F008         	goto	u1321
  2191   0010FA  EF81  F008         	goto	u1320
  2192   0010FE                     u1321:
  2193   0010FE  EF48  F008         	goto	l1806
  2194   001102                     u1320:
  2195   001102  0012               	return		;funcret
  2196   001104                     __end_of_draw_menu:
  2197                           	callstack 0
  2198                           
  2199 ;; *************** function _draw_idle *****************
  2200 ;; Defined at:
  2201 ;;		line 77 in file "main.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;		None
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;		None
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      void 
  2208 ;; Registers used:
  2209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2215 ;;      Params:         0       0       0       0       0       0       0
  2216 ;;      Locals:         0       0       0       0       0       0       0
  2217 ;;      Temps:          0       0       0       0       0       0       0
  2218 ;;      Totals:         0       0       0       0       0       0       0
  2219 ;;Total ram usage:        0 bytes
  2220 ;; Hardware stack levels used: 1
  2221 ;; Hardware stack levels required when called: 4
  2222 ;; This function calls:
  2223 ;;		_LCD_Clear
  2224 ;;		_LCD_SetCursor
  2225 ;;		_LCD_String
  2226 ;; This function is called by:
  2227 ;;		_main
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text4
  2232   0012DC                     __ptext4:
  2233                           	callstack 0
  2234   0012DC                     _draw_idle:
  2235                           	callstack 26
  2236   0012DC                     
  2237                           ;main.c: 78:     PORTB = 0;
  2238   0012DC  EC03  F00A         	call	_LCD_Clear	;wreg free
  2239                           
  2240                           ;main.c: 79:     INTCON2bits.RBPU = 0;
  2241   0012E0  0E00               	movlw	0
  2242   0012E2  6E05               	movwf	LCD_SetCursor@col^0,c
  2243   0012E4  0E00               	movlw	0
  2244   0012E6  EC22  F009         	call	_LCD_SetCursor
  2245   0012EA                     
  2246                           ;main.c: 80: 
  2247   0012EA  0E2D               	movlw	low STR_9
  2248   0012EC  6E05               	movwf	LCD_String@str^0,c
  2249   0012EE  5005               	movf	LCD_String@str^0,w,c
  2250   0012F0  A4D8               	btfss	status,2,c
  2251   0012F2  0E06               	movlw	high __smallconst
  2252   0012F4  6E06               	movwf	(LCD_String@str+1)^0,c
  2253   0012F6  ECC7  F008         	call	_LCD_String	;wreg free
  2254   0012FA                     
  2255                           ;main.c: 81: 
  2256   0012FA  0E00               	movlw	0
  2257   0012FC  6E05               	movwf	LCD_SetCursor@col^0,c
  2258   0012FE  0E01               	movlw	1
  2259   001300  EC22  F009         	call	_LCD_SetCursor
  2260                           
  2261                           ;main.c: 82:     T1CON = 0b00110001;
  2262   001304  0E1A               	movlw	low STR_10
  2263   001306  6E05               	movwf	LCD_String@str^0,c
  2264   001308  5005               	movf	LCD_String@str^0,w,c
  2265   00130A  A4D8               	btfss	status,2,c
  2266   00130C  0E06               	movlw	high __smallconst
  2267   00130E  6E06               	movwf	(LCD_String@str+1)^0,c
  2268   001310  ECC7  F008         	call	_LCD_String	;wreg free
  2269   001314  0012               	return		;funcret
  2270   001316                     __end_of_draw_idle:
  2271                           	callstack 0
  2272                           
  2273 ;; *************** function _draw_edit *****************
  2274 ;; Defined at:
  2275 ;;		line 99 in file "main.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;		None
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;  buf            20   47[COMRAM] unsigned char [20]
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      void 
  2282 ;; Registers used:
  2283 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2289 ;;      Params:         0       0       0       0       0       0       0
  2290 ;;      Locals:        20       0       0       0       0       0       0
  2291 ;;      Temps:          1       0       0       0       0       0       0
  2292 ;;      Totals:        21       0       0       0       0       0       0
  2293 ;;Total ram usage:       21 bytes
  2294 ;; Hardware stack levels used: 1
  2295 ;; Hardware stack levels required when called: 6
  2296 ;; This function calls:
  2297 ;;		_LCD_Clear
  2298 ;;		_LCD_SetCursor
  2299 ;;		_LCD_String
  2300 ;;		_sprintf
  2301 ;; This function is called by:
  2302 ;;		_main
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           	psect	text5
  2307   000E64                     __ptext5:
  2308                           	callstack 0
  2309   000E64                     _draw_edit:
  2310                           	callstack 24
  2311   000E64                     
  2312                           ;main.c: 100:                 };main.c: 101:                 break;
  2313   000E64  EC03  F00A         	call	_LCD_Clear	;wreg free
  2314                           
  2315                           ;main.c: 102:             case MENU:
  2316   000E68  0E00               	movlw	0
  2317   000E6A  6E05               	movwf	LCD_SetCursor@col^0,c
  2318   000E6C  0E00               	movlw	0
  2319   000E6E  EC22  F009         	call	_LCD_SetCursor
  2320   000E72                     
  2321                           ;main.c: 103:                 if (enc) {
  2322   000E72  0E90               	movlw	low STR_12
  2323   000E74  6E05               	movwf	LCD_String@str^0,c
  2324   000E76  5005               	movf	LCD_String@str^0,w,c
  2325   000E78  A4D8               	btfss	status,2,c
  2326   000E7A  0E06               	movlw	high __smallconst
  2327   000E7C  6E06               	movwf	(LCD_String@str+1)^0,c
  2328   000E7E  ECC7  F008         	call	_LCD_String	;wreg free
  2329   000E82                     
  2330                           ;main.c: 104:                     current_index += enc;
  2331   000E82  5057               	movf	_current_index^0,w,c
  2332   000E84  0D08               	mullw	8
  2333   000E86  50F3               	movf	243,w,c
  2334   000E88  0F80               	addlw	low _params
  2335   000E8A  6ED9               	movwf	fsr2l,c
  2336   000E8C  6ADA               	clrf	fsr2h,c
  2337   000E8E  50DF               	movf	indf2,w,c
  2338   000E90  6E2F               	movwf	??_draw_edit^0,c
  2339   000E92  C02F  F005         	movff	??_draw_edit,LCD_String@str
  2340   000E96  5005               	movf	LCD_String@str^0,w,c
  2341   000E98  A4D8               	btfss	status,2,c
  2342   000E9A  0E06               	movlw	high __smallconst
  2343   000E9C  6E06               	movwf	(LCD_String@str+1)^0,c
  2344   000E9E  ECC7  F008         	call	_LCD_String	;wreg free
  2345   000EA2                     
  2346                           ;main.c: 105:                     if (current_index < 0) current_index = 4 - 1;
  2347   000EA2  0E00               	movlw	0
  2348   000EA4  6E05               	movwf	LCD_SetCursor@col^0,c
  2349   000EA6  0E01               	movlw	1
  2350   000EA8  EC22  F009         	call	_LCD_SetCursor
  2351   000EAC                     
  2352                           ;main.c: 106:                     if (current_index >= 4) current_index = 0;
  2353   000EAC  0E5A               	movlw	low STR_13
  2354   000EAE  6E05               	movwf	LCD_String@str^0,c
  2355   000EB0  5005               	movf	LCD_String@str^0,w,c
  2356   000EB2  A4D8               	btfss	status,2,c
  2357   000EB4  0E06               	movlw	high __smallconst
  2358   000EB6  6E06               	movwf	(LCD_String@str+1)^0,c
  2359   000EB8  ECC7  F008         	call	_LCD_String	;wreg free
  2360                           
  2361                           ;main.c: 107:                     draw_menu();
  2362   000EBC  0E30               	movlw	low draw_edit@buf
  2363   000EBE  6E1D               	movwf	sprintf@s^0,c
  2364   000EC0  0E82               	movlw	low STR_14
  2365   000EC2  6E1E               	movwf	sprintf@fmt^0,c
  2366   000EC4  C055  F01F         	movff	_temp_value,?_sprintf+2
  2367   000EC8  C056  F020         	movff	_temp_value+1,?_sprintf+3
  2368   000ECC  5057               	movf	_current_index^0,w,c
  2369   000ECE  0D08               	mullw	8
  2370   000ED0  50F3               	movf	243,w,c
  2371   000ED2  0F87               	addlw	low (_params+7)
  2372   000ED4  6ED9               	movwf	fsr2l,c
  2373   000ED6  6ADA               	clrf	fsr2h,c
  2374   000ED8  50DF               	movf	indf2,w,c
  2375   000EDA  6E2F               	movwf	??_draw_edit^0,c
  2376   000EDC  C02F  F021         	movff	??_draw_edit,?_sprintf+4
  2377   000EE0  5021               	movf	(?_sprintf+4)^0,w,c
  2378   000EE2  A4D8               	btfss	status,2,c
  2379   000EE4  0E06               	movlw	high __smallconst
  2380   000EE6  6E22               	movwf	(?_sprintf+5)^0,c
  2381   000EE8  EC8B  F009         	call	_sprintf	;wreg free
  2382   000EEC                     
  2383                           ;main.c: 108:                 }
  2384   000EEC  0E30               	movlw	low draw_edit@buf
  2385   000EEE  6E05               	movwf	LCD_String@str^0,c
  2386   000EF0  6A06               	clrf	(LCD_String@str+1)^0,c
  2387   000EF2  ECC7  F008         	call	_LCD_String	;wreg free
  2388   000EF6                     
  2389                           ;main.c: 109:                 if (btn == 1) {
  2390   000EF6  0E00               	movlw	0
  2391   000EF8  6E05               	movwf	LCD_SetCursor@col^0,c
  2392   000EFA  0E03               	movlw	3
  2393   000EFC  EC22  F009         	call	_LCD_SetCursor
  2394   000F00                     
  2395                           ;main.c: 110:                     temp_value = params[current_index].value;
  2396   000F00  0E01               	movlw	low STR_15
  2397   000F02  6E05               	movwf	LCD_String@str^0,c
  2398   000F04  5005               	movf	LCD_String@str^0,w,c
  2399   000F06  A4D8               	btfss	status,2,c
  2400   000F08  0E06               	movlw	high __smallconst
  2401   000F0A  6E06               	movwf	(LCD_String@str+1)^0,c
  2402   000F0C  ECC7  F008         	call	_LCD_String	;wreg free
  2403   000F10  0012               	return		;funcret
  2404   000F12                     __end_of_draw_edit:
  2405                           	callstack 0
  2406                           
  2407 ;; *************** function _sprintf *****************
  2408 ;; Defined at:
  2409 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;  s               1   28[COMRAM] PTR unsigned char 
  2412 ;;		 -> draw_edit@buf(20), 
  2413 ;;  fmt             1   29[COMRAM] PTR const unsigned char 
  2414 ;;		 -> STR_14(6), 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;  f              11   35[COMRAM] struct _IO_FILE
  2417 ;;  ret             2    0        int 
  2418 ;;  ap              1   34[COMRAM] PTR void [1]
  2419 ;;		 -> ?_sprintf(2), 
  2420 ;; Return value:  Size  Location     Type
  2421 ;;                  2   28[COMRAM] int 
  2422 ;; Registers used:
  2423 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2429 ;;      Params:         6       0       0       0       0       0       0
  2430 ;;      Locals:        12       0       0       0       0       0       0
  2431 ;;      Temps:          0       0       0       0       0       0       0
  2432 ;;      Totals:        18       0       0       0       0       0       0
  2433 ;;Total ram usage:       18 bytes
  2434 ;; Hardware stack levels used: 1
  2435 ;; Hardware stack levels required when called: 5
  2436 ;; This function calls:
  2437 ;;		_vfprintf
  2438 ;; This function is called by:
  2439 ;;		_draw_edit
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           	psect	text6
  2444   001316                     __ptext6:
  2445                           	callstack 0
  2446   001316                     _sprintf:
  2447                           	callstack 24
  2448   001316  0E1F               	movlw	low (?_sprintf+2)
  2449   001318  6E23               	movwf	sprintf@ap^0,c
  2450   00131A  C01D  F024         	movff	sprintf@s,sprintf@f
  2451   00131E  0E00               	movlw	0
  2452   001320  6E27               	movwf	(sprintf@f+3)^0,c
  2453   001322  0E00               	movlw	0
  2454   001324  6E26               	movwf	(sprintf@f+2)^0,c
  2455   001326  0E00               	movlw	0
  2456   001328  6E2E               	movwf	(sprintf@f+10)^0,c
  2457   00132A  0E00               	movlw	0
  2458   00132C  6E2D               	movwf	(sprintf@f+9)^0,c
  2459   00132E  0E24               	movlw	low sprintf@f
  2460   001330  6E19               	movwf	vfprintf@fp^0,c
  2461   001332  C01E  F01A         	movff	sprintf@fmt,vfprintf@fmt
  2462   001336  0E23               	movlw	low sprintf@ap
  2463   001338  6E1B               	movwf	vfprintf@ap^0,c
  2464   00133A  EC4E  F009         	call	_vfprintf	;wreg free
  2465   00133E  501D               	movf	sprintf@s^0,w,c
  2466   001340  2426               	addwf	(sprintf@f+2)^0,w,c
  2467   001342  6ED9               	movwf	fsr2l,c
  2468   001344  6ADA               	clrf	fsr2h,c
  2469   001346  6ADF               	clrf	indf2,c
  2470   001348  0012               	return		;funcret
  2471   00134A                     __end_of_sprintf:
  2472                           	callstack 0
  2473                           
  2474 ;; *************** function _vfprintf *****************
  2475 ;; Defined at:
  2476 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;  fp              1   24[COMRAM] PTR struct _IO_FILE
  2479 ;;		 -> sprintf@f(11), 
  2480 ;;  fmt             1   25[COMRAM] PTR const unsigned char 
  2481 ;;		 -> STR_14(6), 
  2482 ;;  ap              1   26[COMRAM] PTR PTR void 
  2483 ;;		 -> sprintf@ap(1), 
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  cfmt            1   27[COMRAM] PTR unsigned char 
  2486 ;;		 -> STR_14(6), 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  2   24[COMRAM] int 
  2489 ;; Registers used:
  2490 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2496 ;;      Params:         3       0       0       0       0       0       0
  2497 ;;      Locals:         1       0       0       0       0       0       0
  2498 ;;      Temps:          0       0       0       0       0       0       0
  2499 ;;      Totals:         4       0       0       0       0       0       0
  2500 ;;Total ram usage:        4 bytes
  2501 ;; Hardware stack levels used: 1
  2502 ;; Hardware stack levels required when called: 4
  2503 ;; This function calls:
  2504 ;;		_vfpfcnvrt
  2505 ;; This function is called by:
  2506 ;;		_sprintf
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text7
  2511   00129C                     __ptext7:
  2512                           	callstack 0
  2513   00129C                     _vfprintf:
  2514                           	callstack 24
  2515   00129C                     
  2516                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2517   00129C  C01A  F01C         	movff	vfprintf@fmt,vfprintf@cfmt
  2518                           
  2519                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2520   0012A0  EF5B  F009         	goto	l1656
  2521   0012A4                     l1654:
  2522                           
  2523                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2524   0012A4  C019  F00B         	movff	vfprintf@fp,vfpfcnvrt@fp
  2525   0012A8  0E1C               	movlw	low vfprintf@cfmt
  2526   0012AA  6E0C               	movwf	vfpfcnvrt@fmt^0,c
  2527   0012AC  C01B  F00D         	movff	vfprintf@ap,vfpfcnvrt@ap
  2528   0012B0  6A0E               	clrf	(vfpfcnvrt@ap+1)^0,c
  2529   0012B2  EC4A  F003         	call	_vfpfcnvrt	;wreg free
  2530   0012B6                     l1656:
  2531                           
  2532                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2533   0012B6  C01C  FFF6         	movff	vfprintf@cfmt,tblptrl
  2534   0012BA                     	if	1	;There is more than 1 active tblptr byte
  2535   0012BA  0E06               	movlw	high __smallconst
  2536   0012BC  6EF7               	movwf	tblptrh,c
  2537   0012BE                     	endif
  2538   0012BE                     	if	0	;tblptru may be non-zero
  2539   0012BE                     	endif
  2540   0012BE                     	if	0	;tblptru may be non-zero
  2541   0012BE                     	endif
  2542   0012BE  0008               	tblrd		*
  2543   0012C0  50F5               	movf	tablat,w,c
  2544   0012C2  0900               	iorlw	0
  2545   0012C4  A4D8               	btfss	status,2,c
  2546   0012C6  EF67  F009         	goto	u1091
  2547   0012CA  EF69  F009         	goto	u1090
  2548   0012CE                     u1091:
  2549   0012CE  EF52  F009         	goto	l1654
  2550   0012D2                     u1090:
  2551   0012D2                     
  2552                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2553   0012D2  0E00               	movlw	0
  2554   0012D4  6E1A               	movwf	(?_vfprintf+1)^0,c
  2555   0012D6  0E00               	movlw	0
  2556   0012D8  6E19               	movwf	?_vfprintf^0,c
  2557   0012DA  0012               	return		;funcret
  2558   0012DC                     __end_of_vfprintf:
  2559                           	callstack 0
  2560                           
  2561 ;; *************** function _vfpfcnvrt *****************
  2562 ;; Defined at:
  2563 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  2566 ;;		 -> sprintf@f(11), 
  2567 ;;  fmt             1   11[COMRAM] PTR PTR unsigned char 
  2568 ;;		 -> vfprintf@cfmt(1), 
  2569 ;;  ap              2   12[COMRAM] PTR PTR void 
  2570 ;;		 -> sprintf@ap(1), 
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  cp              2   15[COMRAM] PTR unsigned char 
  2573 ;;		 -> ?_sprintf(2), STR_8(4), STR_6(4), STR_4(4), 
  2574 ;;		 -> STR_2(4), 
  2575 ;;  convarg         4   19[COMRAM] struct .
  2576 ;;  c               1   23[COMRAM] unsigned char 
  2577 ;;  cp              1   18[COMRAM] PTR unsigned char 
  2578 ;;		 -> STR_14(6), 
  2579 ;;  done            1   17[COMRAM] _Bool 
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  1    wreg      void 
  2582 ;; Registers used:
  2583 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2589 ;;      Params:         4       0       0       0       0       0       0
  2590 ;;      Locals:         9       0       0       0       0       0       0
  2591 ;;      Temps:          1       0       0       0       0       0       0
  2592 ;;      Totals:        14       0       0       0       0       0       0
  2593 ;;Total ram usage:       14 bytes
  2594 ;; Hardware stack levels used: 1
  2595 ;; Hardware stack levels required when called: 3
  2596 ;; This function calls:
  2597 ;;		___awdiv
  2598 ;;		___awmod
  2599 ;;		_abs
  2600 ;;		_fputc
  2601 ;; This function is called by:
  2602 ;;		_vfprintf
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           	psect	text8
  2607   000694                     __ptext8:
  2608                           	callstack 0
  2609   000694                     _vfpfcnvrt:
  2610                           	callstack 24
  2611   000694                     
  2612                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2613   000694  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2614   000696  6ED9               	movwf	fsr2l,c
  2615   000698  6ADA               	clrf	fsr2h,c
  2616   00069A  CFDF FFF6          	movff	indf2,tblptrl
  2617   00069E                     	if	1	;There is more than 1 active tblptr byte
  2618   00069E  0E06               	movlw	high __smallconst
  2619   0006A0  6EF7               	movwf	tblptrh,c
  2620   0006A2                     	endif
  2621   0006A2                     	if	0	;tblptru may be non-zero
  2622   0006A2                     	endif
  2623   0006A2                     	if	0	;tblptru may be non-zero
  2624   0006A2                     	endif
  2625   0006A2  0008               	tblrd		*
  2626   0006A4  50F5               	movf	tablat,w,c
  2627   0006A6  0A25               	xorlw	37
  2628   0006A8  A4D8               	btfss	status,2,c
  2629   0006AA  EF59  F003         	goto	u911
  2630   0006AE  EF5B  F003         	goto	u910
  2631   0006B2                     u911:
  2632   0006B2  EFBC  F004         	goto	l1642
  2633   0006B6                     u910:
  2634   0006B6                     
  2635                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2636   0006B6  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2637   0006B8  6ED9               	movwf	fsr2l,c
  2638   0006BA  6ADA               	clrf	fsr2h,c
  2639   0006BC  2ADF               	incf	indf2,f,c
  2640   0006BE                     
  2641                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2642   0006BE  0E00               	movlw	0
  2643   0006C0  6E52               	movwf	(_width+1)^0,c
  2644   0006C2  0E00               	movlw	0
  2645   0006C4  6E51               	movwf	_width^0,c
  2646   0006C6  C051  F059         	movff	_width,_flags
  2647   0006CA                     
  2648                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2649   0006CA  6853               	setf	_prec^0,c
  2650   0006CC  6854               	setf	(_prec+1)^0,c
  2651   0006CE                     
  2652                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  2653   0006CE  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2654   0006D0  6ED9               	movwf	fsr2l,c
  2655   0006D2  6ADA               	clrf	fsr2h,c
  2656   0006D4  50DF               	movf	indf2,w,c
  2657   0006D6  6E13               	movwf	vfpfcnvrt@cp^0,c
  2658   0006D8                     
  2659                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2660   0006D8  C013  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2661   0006DC                     	if	1	;There is more than 1 active tblptr byte
  2662   0006DC  0E06               	movlw	high __smallconst
  2663   0006DE  6EF7               	movwf	tblptrh,c
  2664   0006E0                     	endif
  2665   0006E0                     	if	0	;tblptru may be non-zero
  2666   0006E0                     	endif
  2667   0006E0                     	if	0	;tblptru may be non-zero
  2668   0006E0                     	endif
  2669   0006E0  0008               	tblrd		*
  2670   0006E2  50F5               	movf	tablat,w,c
  2671   0006E4  0A64               	xorlw	100
  2672   0006E6  B4D8               	btfsc	status,2,c
  2673   0006E8  EF78  F003         	goto	u921
  2674   0006EC  EF7A  F003         	goto	u920
  2675   0006F0                     u921:
  2676   0006F0  EF88  F003         	goto	l1584
  2677   0006F4                     u920:
  2678   0006F4  C013  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2679   0006F8                     	if	1	;There is more than 1 active tblptr byte
  2680   0006F8  0E06               	movlw	high __smallconst
  2681   0006FA  6EF7               	movwf	tblptrh,c
  2682   0006FC                     	endif
  2683   0006FC                     	if	0	;tblptru may be non-zero
  2684   0006FC                     	endif
  2685   0006FC                     	if	0	;tblptru may be non-zero
  2686   0006FC                     	endif
  2687   0006FC  0008               	tblrd		*
  2688   0006FE  50F5               	movf	tablat,w,c
  2689   000700  0A69               	xorlw	105
  2690   000702  A4D8               	btfss	status,2,c
  2691   000704  EF86  F003         	goto	u931
  2692   000708  EF88  F003         	goto	u930
  2693   00070C                     u931:
  2694   00070C  EF0F  F004         	goto	l886
  2695   000710                     u930:
  2696   000710                     l1584:
  2697                           
  2698                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2699   000710  C00D  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2700   000714  C00E  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2701   000718  0E02               	movlw	2
  2702   00071A  26DF               	addwf	indf2,f,c
  2703   00071C  5CDF               	subwf	indf2,w,c
  2704   00071E  6ED9               	movwf	fsr2l,c
  2705   000720  6ADA               	clrf	fsr2h,c
  2706   000722  CFDE F014          	movff	postinc2,vfpfcnvrt@convarg
  2707   000726  CFDE F015          	movff	postinc2,vfpfcnvrt@convarg+1
  2708   00072A                     
  2709                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  2710   00072A  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2711   00072C  6ED9               	movwf	fsr2l,c
  2712   00072E  6ADA               	clrf	fsr2h,c
  2713   000730  2813               	incf	vfpfcnvrt@cp^0,w,c
  2714   000732  6EDF               	movwf	indf2,c
  2715   000734                     
  2716                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  2717   000734  0E20               	movlw	32
  2718   000736  6E18               	movwf	vfpfcnvrt@c^0,c
  2719   000738                     
  2720                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  2721   000738  BE15               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2722   00073A  EFA1  F003         	goto	u941
  2723   00073E  EFA4  F003         	goto	u940
  2724   000742                     u941:
  2725   000742  0E01               	movlw	1
  2726   000744  EFA5  F003         	goto	u950
  2727   000748                     u940:
  2728   000748  0E00               	movlw	0
  2729   00074A                     u950:
  2730   00074A  6E12               	movwf	vfpfcnvrt@done^0,c
  2731   00074C                     l1592:
  2732                           
  2733                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  2734   00074C  0618               	decf	vfpfcnvrt@c^0,f,c
  2735   00074E  5018               	movf	vfpfcnvrt@c^0,w,c
  2736   000750  0F60               	addlw	low _dbuf
  2737   000752  6ED9               	movwf	fsr2l,c
  2738   000754  6ADA               	clrf	fsr2h,c
  2739   000756  C014  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  2740   00075A  C015  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  2741   00075E  0E00               	movlw	0
  2742   000760  6E04               	movwf	(___awmod@divisor+1)^0,c
  2743   000762  0E0A               	movlw	10
  2744   000764  6E03               	movwf	___awmod@divisor^0,c
  2745   000766  EC89  F007         	call	___awmod	;wreg free
  2746   00076A  C001  F007         	movff	?___awmod,abs@a
  2747   00076E  C002  F008         	movff	?___awmod+1,abs@a+1
  2748   000772  ECA5  F009         	call	_abs	;wreg free
  2749   000776  5007               	movf	?_abs^0,w,c
  2750   000778  0F30               	addlw	48
  2751   00077A  6EDF               	movwf	indf2,c
  2752   00077C                     
  2753                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  2754   00077C  C014  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  2755   000780  C015  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  2756   000784  0E00               	movlw	0
  2757   000786  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2758   000788  0E0A               	movlw	10
  2759   00078A  6E03               	movwf	___awdiv@divisor^0,c
  2760   00078C  ECD1  F006         	call	___awdiv	;wreg free
  2761   000790  C001  F014         	movff	?___awdiv,vfpfcnvrt@convarg
  2762   000794  C002  F015         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  2763   000798                     
  2764                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  2765   000798  5014               	movf	vfpfcnvrt@convarg^0,w,c
  2766   00079A  1015               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  2767   00079C  B4D8               	btfsc	status,2,c
  2768   00079E  EFD3  F003         	goto	u961
  2769   0007A2  EFD5  F003         	goto	u960
  2770   0007A6                     u961:
  2771   0007A6  EFDD  F003         	goto	l1600
  2772   0007AA                     u960:
  2773   0007AA  5018               	movf	vfpfcnvrt@c^0,w,c
  2774   0007AC  A4D8               	btfss	status,2,c
  2775   0007AE  EFDB  F003         	goto	u971
  2776   0007B2  EFDD  F003         	goto	u970
  2777   0007B6                     u971:
  2778   0007B6  EFA6  F003         	goto	l1592
  2779   0007BA                     u970:
  2780   0007BA                     l1600:
  2781                           
  2782                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  2783   0007BA  5018               	movf	vfpfcnvrt@c^0,w,c
  2784   0007BC  B4D8               	btfsc	status,2,c
  2785   0007BE  EFE3  F003         	goto	u981
  2786   0007C2  EFE5  F003         	goto	u980
  2787   0007C6                     u981:
  2788   0007C6  EF04  F004         	goto	l1610
  2789   0007CA                     u980:
  2790   0007CA  5012               	movf	vfpfcnvrt@done^0,w,c
  2791   0007CC  B4D8               	btfsc	status,2,c
  2792   0007CE  EFEB  F003         	goto	u991
  2793   0007D2  EFED  F003         	goto	u990
  2794   0007D6                     u991:
  2795   0007D6  EF04  F004         	goto	l1610
  2796   0007DA                     u990:
  2797   0007DA                     
  2798                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  2799   0007DA  0618               	decf	vfpfcnvrt@c^0,f,c
  2800   0007DC  5018               	movf	vfpfcnvrt@c^0,w,c
  2801   0007DE  0F60               	addlw	low _dbuf
  2802   0007E0  6ED9               	movwf	fsr2l,c
  2803   0007E2  6ADA               	clrf	fsr2h,c
  2804   0007E4  0E2D               	movlw	45
  2805   0007E6  6EDF               	movwf	indf2,c
  2806   0007E8  EF04  F004         	goto	l1610
  2807   0007EC                     l1606:
  2808                           
  2809                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  2810   0007EC  5018               	movf	vfpfcnvrt@c^0,w,c
  2811   0007EE  0F60               	addlw	low _dbuf
  2812   0007F0  6ED9               	movwf	fsr2l,c
  2813   0007F2  6ADA               	clrf	fsr2h,c
  2814   0007F4  50DF               	movf	indf2,w,c
  2815   0007F6  6E0F               	movwf	??_vfpfcnvrt^0,c
  2816   0007F8  500F               	movf	??_vfpfcnvrt^0,w,c
  2817   0007FA  6E01               	movwf	fputc@c^0,c
  2818   0007FC  6A02               	clrf	(fputc@c+1)^0,c
  2819   0007FE  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2820   000802  ECE0  F007         	call	_fputc	;wreg free
  2821   000806  2A18               	incf	vfpfcnvrt@c^0,f,c
  2822   000808                     l1610:
  2823                           
  2824                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  2825   000808  0E20               	movlw	32
  2826   00080A  1818               	xorwf	vfpfcnvrt@c^0,w,c
  2827   00080C  A4D8               	btfss	status,2,c
  2828   00080E  EF0B  F004         	goto	u1001
  2829   000812  EF0D  F004         	goto	u1000
  2830   000816                     u1001:
  2831   000816  EFF6  F003         	goto	l1606
  2832   00081A                     u1000:
  2833   00081A  EFCD  F004         	goto	l897
  2834   00081E                     l886:
  2835                           
  2836                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1656:   done = 0;
  2837   00081E  6A12               	clrf	vfpfcnvrt@done^0,c
  2838   000820                     
  2839                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1657:   if ((*fmt
      +                          )[0] == 's') {
  2840   000820  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2841   000822  6ED9               	movwf	fsr2l,c
  2842   000824  6ADA               	clrf	fsr2h,c
  2843   000826  CFDF FFF6          	movff	indf2,tblptrl
  2844   00082A                     	if	1	;There is more than 1 active tblptr byte
  2845   00082A  0E06               	movlw	high __smallconst
  2846   00082C  6EF7               	movwf	tblptrh,c
  2847   00082E                     	endif
  2848   00082E                     	if	0	;tblptru may be non-zero
  2849   00082E                     	endif
  2850   00082E                     	if	0	;tblptru may be non-zero
  2851   00082E                     	endif
  2852   00082E  0008               	tblrd		*
  2853   000830  50F5               	movf	tablat,w,c
  2854   000832  0A73               	xorlw	115
  2855   000834  A4D8               	btfss	status,2,c
  2856   000836  EF1F  F004         	goto	u1011
  2857   00083A  EF21  F004         	goto	u1010
  2858   00083E                     u1011:
  2859   00083E  EF29  F004         	goto	l1618
  2860   000842                     u1010:
  2861   000842                     
  2862                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1658:    ++*fmt;
  2863   000842  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2864   000844  6ED9               	movwf	fsr2l,c
  2865   000846  6ADA               	clrf	fsr2h,c
  2866   000848  2ADF               	incf	indf2,f,c
  2867   00084A                     l1616:
  2868                           
  2869                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1659:    done = 1
      +                          ;
  2870   00084A  0E01               	movlw	1
  2871   00084C  6E12               	movwf	vfpfcnvrt@done^0,c
  2872                           
  2873                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1660:   }
  2874   00084E  EF6B  F004         	goto	l1628
  2875   000852                     l1618:
  2876   000852  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2877   000854  6ED9               	movwf	fsr2l,c
  2878   000856  6ADA               	clrf	fsr2h,c
  2879   000858  CFDF FFF6          	movff	indf2,tblptrl
  2880   00085C                     	if	1	;There is more than 1 active tblptr byte
  2881   00085C  0E06               	movlw	high __smallconst
  2882   00085E  6EF7               	movwf	tblptrh,c
  2883   000860                     	endif
  2884   000860                     	if	0	;tblptru may be non-zero
  2885   000860                     	endif
  2886   000860                     	if	0	;tblptru may be non-zero
  2887   000860                     	endif
  2888   000860  0008               	tblrd		*
  2889   000862  50F5               	movf	tablat,w,c
  2890   000864  0A6C               	xorlw	108
  2891   000866  A4D8               	btfss	status,2,c
  2892   000868  EF38  F004         	goto	u1021
  2893   00086C  EF3A  F004         	goto	u1020
  2894   000870                     u1021:
  2895   000870  EF6B  F004         	goto	l1628
  2896   000874                     u1020:
  2897   000874  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2898   000876  6ED9               	movwf	fsr2l,c
  2899   000878  6ADA               	clrf	fsr2h,c
  2900   00087A  50DF               	movf	indf2,w,c
  2901   00087C  6E0F               	movwf	??_vfpfcnvrt^0,c
  2902   00087E  0E01               	movlw	1
  2903   000880  260F               	addwf	??_vfpfcnvrt^0,f,c
  2904   000882  C00F  FFF6         	movff	??_vfpfcnvrt,tblptrl
  2905   000886                     	if	1	;There is more than 1 active tblptr byte
  2906   000886  0E06               	movlw	high __smallconst
  2907   000888  6EF7               	movwf	tblptrh,c
  2908   00088A                     	endif
  2909   00088A                     	if	0	;tblptru may be non-zero
  2910   00088A                     	endif
  2911   00088A                     	if	0	;tblptru may be non-zero
  2912   00088A                     	endif
  2913   00088A  0008               	tblrd		*
  2914   00088C  50F5               	movf	tablat,w,c
  2915   00088E  0A6C               	xorlw	108
  2916   000890  A4D8               	btfss	status,2,c
  2917   000892  EF4D  F004         	goto	u1031
  2918   000896  EF4F  F004         	goto	u1030
  2919   00089A                     u1031:
  2920   00089A  EF6B  F004         	goto	l1628
  2921   00089E                     u1030:
  2922   00089E  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2923   0008A0  6ED9               	movwf	fsr2l,c
  2924   0008A2  6ADA               	clrf	fsr2h,c
  2925   0008A4  50DF               	movf	indf2,w,c
  2926   0008A6  6E0F               	movwf	??_vfpfcnvrt^0,c
  2927   0008A8  0E02               	movlw	2
  2928   0008AA  260F               	addwf	??_vfpfcnvrt^0,f,c
  2929   0008AC  C00F  FFF6         	movff	??_vfpfcnvrt,tblptrl
  2930   0008B0                     	if	1	;There is more than 1 active tblptr byte
  2931   0008B0  0E06               	movlw	high __smallconst
  2932   0008B2  6EF7               	movwf	tblptrh,c
  2933   0008B4                     	endif
  2934   0008B4                     	if	0	;tblptru may be non-zero
  2935   0008B4                     	endif
  2936   0008B4                     	if	0	;tblptru may be non-zero
  2937   0008B4                     	endif
  2938   0008B4  0008               	tblrd		*
  2939   0008B6  50F5               	movf	tablat,w,c
  2940   0008B8  0A73               	xorlw	115
  2941   0008BA  A4D8               	btfss	status,2,c
  2942   0008BC  EF62  F004         	goto	u1041
  2943   0008C0  EF64  F004         	goto	u1040
  2944   0008C4                     u1041:
  2945   0008C4  EF6B  F004         	goto	l1628
  2946   0008C8                     u1040:
  2947   0008C8                     
  2948                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1662:    *fmt += 
      +                          3;
  2949   0008C8  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2950   0008CA  6ED9               	movwf	fsr2l,c
  2951   0008CC  6ADA               	clrf	fsr2h,c
  2952   0008CE  0E03               	movlw	3
  2953   0008D0  26DF               	addwf	indf2,f,c
  2954   0008D2  EF25  F004         	goto	l1616
  2955   0008D6                     l1628:
  2956                           
  2957                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1665:   if (done)
      +                           {
  2958   0008D6  5012               	movf	vfpfcnvrt@done^0,w,c
  2959   0008D8  B4D8               	btfsc	status,2,c
  2960   0008DA  EF71  F004         	goto	u1051
  2961   0008DE  EF73  F004         	goto	u1050
  2962   0008E2                     u1051:
  2963   0008E2  EFB6  F004         	goto	l1638
  2964   0008E6                     u1050:
  2965   0008E6                     
  2966                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1669:    for (cha
      +                          r * cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0)); *cp != '\0'; cp++) {
  2967   0008E6  C00D  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2968   0008EA  C00E  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2969   0008EE  0E02               	movlw	2
  2970   0008F0  26DF               	addwf	indf2,f,c
  2971   0008F2  5CDF               	subwf	indf2,w,c
  2972   0008F4  6ED9               	movwf	fsr2l,c
  2973   0008F6  6ADA               	clrf	fsr2h,c
  2974   0008F8  CFDE F010          	movff	postinc2,vfpfcnvrt@cp_1178
  2975   0008FC  CFDE F011          	movff	postinc2,vfpfcnvrt@cp_1178+1
  2976   000900  EF9C  F004         	goto	l1636
  2977   000904                     l1632:
  2978                           
  2979                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1670:     fputc(*
      +                          cp, fp);
  2980   000904  C010  FFF6         	movff	vfpfcnvrt@cp_1178,tblptrl
  2981   000908  C011  FFF7         	movff	vfpfcnvrt@cp_1178+1,tblptrh
  2982   00090C  6AF8               	clrf	tblptru,c
  2983   00090E  0E05               	movlw	(high __ramtop+-1)
  2984   000910  64F7               	cpfsgt	tblptrh,c
  2985   000912  D003               	bra	u1067
  2986   000914  0008               	tblrd		*
  2987   000916  50F5               	movf	tablat,w,c
  2988   000918  D005               	bra	u1060
  2989   00091A                     u1067:
  2990   00091A  CFF6 FFE1          	movff	tblptrl,fsr1l
  2991   00091E  CFF7 FFE2          	movff	tblptrh,fsr1h
  2992   000922  50E7               	movf	indf1,w,c
  2993   000924                     u1060:
  2994   000924  6E0F               	movwf	??_vfpfcnvrt^0,c
  2995   000926  500F               	movf	??_vfpfcnvrt^0,w,c
  2996   000928  6E01               	movwf	fputc@c^0,c
  2997   00092A  6A02               	clrf	(fputc@c+1)^0,c
  2998   00092C  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2999   000930  ECE0  F007         	call	_fputc	;wreg free
  3000   000934                     
  3001                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1674:    }
  3002   000934  4A10               	infsnz	vfpfcnvrt@cp_1178^0,f,c
  3003   000936  2A11               	incf	(vfpfcnvrt@cp_1178+1)^0,f,c
  3004   000938                     l1636:
  3005   000938  C010  FFF6         	movff	vfpfcnvrt@cp_1178,tblptrl
  3006   00093C  C011  FFF7         	movff	vfpfcnvrt@cp_1178+1,tblptrh
  3007   000940  6AF8               	clrf	tblptru,c
  3008   000942  0E05               	movlw	(high __ramtop+-1)
  3009   000944  64F7               	cpfsgt	tblptrh,c
  3010   000946  D003               	bra	u1077
  3011   000948  0008               	tblrd		*
  3012   00094A  50F5               	movf	tablat,w,c
  3013   00094C  D005               	bra	u1070
  3014   00094E                     u1077:
  3015   00094E  CFF6 FFE1          	movff	tblptrl,fsr1l
  3016   000952  CFF7 FFE2          	movff	tblptrh,fsr1h
  3017   000956  50E7               	movf	indf1,w,c
  3018   000958                     u1070:
  3019   000958  0900               	iorlw	0
  3020   00095A  A4D8               	btfss	status,2,c
  3021   00095C  EFB2  F004         	goto	u1081
  3022   000960  EFB4  F004         	goto	u1080
  3023   000964                     u1081:
  3024   000964  EF82  F004         	goto	l1632
  3025   000968                     u1080:
  3026   000968  EFCD  F004         	goto	l897
  3027   00096C                     l1638:
  3028                           
  3029                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  3030   00096C  500C               	movf	vfpfcnvrt@fmt^0,w,c
  3031   00096E  6ED9               	movwf	fsr2l,c
  3032   000970  6ADA               	clrf	fsr2h,c
  3033   000972  2ADF               	incf	indf2,f,c
  3034   000974  EFCD  F004         	goto	l897
  3035   000978                     l1642:
  3036                           
  3037                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  3038   000978  500C               	movf	vfpfcnvrt@fmt^0,w,c
  3039   00097A  6ED9               	movwf	fsr2l,c
  3040   00097C  6ADA               	clrf	fsr2h,c
  3041   00097E  CFDF FFF6          	movff	indf2,tblptrl
  3042   000982                     	if	1	;There is more than 1 active tblptr byte
  3043   000982  0E06               	movlw	high __smallconst
  3044   000984  6EF7               	movwf	tblptrh,c
  3045   000986                     	endif
  3046   000986                     	if	0	;tblptru may be non-zero
  3047   000986                     	endif
  3048   000986                     	if	0	;tblptru may be non-zero
  3049   000986                     	endif
  3050   000986  0008               	tblrd		*
  3051   000988  50F5               	movf	tablat,w,c
  3052   00098A  6E01               	movwf	fputc@c^0,c
  3053   00098C  6A02               	clrf	(fputc@c+1)^0,c
  3054   00098E  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3055   000992  ECE0  F007         	call	_fputc	;wreg free
  3056   000996  EFB6  F004         	goto	l1638
  3057   00099A                     l897:
  3058   00099A  0012               	return		;funcret
  3059   00099C                     __end_of_vfpfcnvrt:
  3060                           	callstack 0
  3061                           
  3062 ;; *************** function _fputc *****************
  3063 ;; Defined at:
  3064 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;  c               2    0[COMRAM] int 
  3067 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  3068 ;;		 -> sprintf@f(11), 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;		None
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  2    0[COMRAM] int 
  3073 ;; Registers used:
  3074 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3080 ;;      Params:         3       0       0       0       0       0       0
  3081 ;;      Locals:         0       0       0       0       0       0       0
  3082 ;;      Temps:          5       0       0       0       0       0       0
  3083 ;;      Totals:         8       0       0       0       0       0       0
  3084 ;;Total ram usage:        8 bytes
  3085 ;; Hardware stack levels used: 1
  3086 ;; Hardware stack levels required when called: 2
  3087 ;; This function calls:
  3088 ;;		_putch
  3089 ;; This function is called by:
  3090 ;;		_vfpfcnvrt
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           	psect	text9
  3095   000FC0                     __ptext9:
  3096                           	callstack 0
  3097   000FC0                     _fputc:
  3098                           	callstack 24
  3099   000FC0  5003               	movf	fputc@fp^0,w,c
  3100   000FC2  B4D8               	btfsc	status,2,c
  3101   000FC4  EFE6  F007         	goto	u851
  3102   000FC8  EFE8  F007         	goto	u850
  3103   000FCC                     u851:
  3104   000FCC  EFF0  F007         	goto	l1542
  3105   000FD0                     u850:
  3106   000FD0  5003               	movf	fputc@fp^0,w,c
  3107   000FD2  A4D8               	btfss	status,2,c
  3108   000FD4  EFEE  F007         	goto	u861
  3109   000FD8  EFF0  F007         	goto	u860
  3110   000FDC                     u861:
  3111   000FDC  EFF5  F007         	goto	l1544
  3112   000FE0                     u860:
  3113   000FE0                     l1542:
  3114   000FE0  5001               	movf	fputc@c^0,w,c
  3115   000FE2  EC0F  F00A         	call	_putch
  3116   000FE6  EF34  F008         	goto	l929
  3117   000FEA                     l1544:
  3118   000FEA  5003               	movf	fputc@fp^0,w,c
  3119   000FEC  6ED9               	movwf	fsr2l,c
  3120   000FEE  6ADA               	clrf	fsr2h,c
  3121   000FF0  0E09               	movlw	9
  3122   000FF2  26D9               	addwf	fsr2l,f,c
  3123   000FF4  50DE               	movf	postinc2,w,c
  3124   000FF6  10DE               	iorwf	postinc2,w,c
  3125   000FF8  B4D8               	btfsc	status,2,c
  3126   000FFA  EF01  F008         	goto	u871
  3127   000FFE  EF03  F008         	goto	u870
  3128   001002                     u871:
  3129   001002  EF1C  F008         	goto	l1548
  3130   001006                     u870:
  3131   001006  5003               	movf	fputc@fp^0,w,c
  3132   001008  6ED9               	movwf	fsr2l,c
  3133   00100A  6ADA               	clrf	fsr2h,c
  3134   00100C  0E09               	movlw	9
  3135   00100E  26D9               	addwf	fsr2l,f,c
  3136   001010  5003               	movf	fputc@fp^0,w,c
  3137   001012  6EE1               	movwf	fsr1l,c
  3138   001014  6AE2               	clrf	fsr1h,c
  3139   001016  0E02               	movlw	2
  3140   001018  26E1               	addwf	fsr1l,f,c
  3141   00101A  50DE               	movf	postinc2,w,c
  3142   00101C  5CE6               	subwf	postinc1,w,c
  3143   00101E  50E6               	movf	postinc1,w,c
  3144   001020  0A80               	xorlw	128
  3145   001022  6E08               	movwf	(??_fputc+4)^0,c
  3146   001024  50DE               	movf	postinc2,w,c
  3147   001026  0A80               	xorlw	128
  3148   001028  5808               	subwfb	(??_fputc+4)^0,w,c
  3149   00102A  B0D8               	btfsc	status,0,c
  3150   00102C  EF1A  F008         	goto	u881
  3151   001030  EF1C  F008         	goto	u880
  3152   001034                     u881:
  3153   001034  EF34  F008         	goto	l929
  3154   001038                     u880:
  3155   001038                     l1548:
  3156   001038  5003               	movf	fputc@fp^0,w,c
  3157   00103A  6ED9               	movwf	fsr2l,c
  3158   00103C  6ADA               	clrf	fsr2h,c
  3159   00103E  0E02               	movlw	2
  3160   001040  26D9               	addwf	fsr2l,f,c
  3161   001042  50DF               	movf	indf2,w,c
  3162   001044  6E04               	movwf	??_fputc^0,c
  3163   001046  5003               	movf	fputc@fp^0,w,c
  3164   001048  6ED9               	movwf	fsr2l,c
  3165   00104A  6ADA               	clrf	fsr2h,c
  3166   00104C  50DF               	movf	indf2,w,c
  3167   00104E  2404               	addwf	??_fputc^0,w,c
  3168   001050  6ED9               	movwf	fsr2l,c
  3169   001052  6ADA               	clrf	fsr2h,c
  3170   001054  C001  FFDF         	movff	fputc@c,indf2
  3171   001058  5003               	movf	fputc@fp^0,w,c
  3172   00105A  6ED9               	movwf	fsr2l,c
  3173   00105C  6ADA               	clrf	fsr2h,c
  3174   00105E  0E02               	movlw	2
  3175   001060  26D9               	addwf	fsr2l,f,c
  3176   001062  2ADE               	incf	postinc2,f,c
  3177   001064  0E00               	movlw	0
  3178   001066  22DD               	addwfc	postdec2,f,c
  3179   001068                     l929:
  3180   001068  0012               	return		;funcret
  3181   00106A                     __end_of_fputc:
  3182                           	callstack 0
  3183                           
  3184 ;; *************** function _putch *****************
  3185 ;; Defined at:
  3186 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  c               1    wreg     unsigned char 
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;  c               1    0[COMRAM] unsigned char 
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  1    wreg      void 
  3193 ;; Registers used:
  3194 ;;		wreg
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3200 ;;      Params:         0       0       0       0       0       0       0
  3201 ;;      Locals:         0       0       0       0       0       0       0
  3202 ;;      Temps:          0       0       0       0       0       0       0
  3203 ;;      Totals:         0       0       0       0       0       0       0
  3204 ;;Total ram usage:        0 bytes
  3205 ;; Hardware stack levels used: 1
  3206 ;; Hardware stack levels required when called: 1
  3207 ;; This function calls:
  3208 ;;		Nothing
  3209 ;; This function is called by:
  3210 ;;		_fputc
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text10
  3215   00141E                     __ptext10:
  3216                           	callstack 0
  3217   00141E                     _putch:
  3218                           	callstack 24
  3219   00141E  0012               	return		;funcret
  3220   001420                     __end_of_putch:
  3221                           	callstack 0
  3222                           
  3223 ;; *************** function _abs *****************
  3224 ;; Defined at:
  3225 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\abs.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;  a               2    6[COMRAM] int 
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;		None
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  2    6[COMRAM] int 
  3232 ;; Registers used:
  3233 ;;		wreg, status,2, status,0
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3239 ;;      Params:         2       0       0       0       0       0       0
  3240 ;;      Locals:         0       0       0       0       0       0       0
  3241 ;;      Temps:          2       0       0       0       0       0       0
  3242 ;;      Totals:         4       0       0       0       0       0       0
  3243 ;;Total ram usage:        4 bytes
  3244 ;; Hardware stack levels used: 1
  3245 ;; Hardware stack levels required when called: 1
  3246 ;; This function calls:
  3247 ;;		Nothing
  3248 ;; This function is called by:
  3249 ;;		_vfpfcnvrt
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           	psect	text11
  3254   00134A                     __ptext11:
  3255                           	callstack 0
  3256   00134A                     _abs:
  3257                           	callstack 25
  3258   00134A  BE08               	btfsc	(abs@a+1)^0,7,c
  3259   00134C  EFAA  F009         	goto	u891
  3260   001350  EFAC  F009         	goto	u890
  3261   001354                     u891:
  3262   001354  EFB2  F009         	goto	l914
  3263   001358                     u890:
  3264   001358  C007  F007         	movff	abs@a,?_abs
  3265   00135C  C008  F008         	movff	abs@a+1,?_abs+1
  3266   001360  EFBE  F009         	goto	l917
  3267   001364                     l914:
  3268   001364  C007  F009         	movff	abs@a,??_abs
  3269   001368  C008  F00A         	movff	abs@a+1,??_abs+1
  3270   00136C  1E09               	comf	??_abs^0,f,c
  3271   00136E  1E0A               	comf	(??_abs+1)^0,f,c
  3272   001370  4A09               	infsnz	??_abs^0,f,c
  3273   001372  2A0A               	incf	(??_abs+1)^0,f,c
  3274   001374  C009  F007         	movff	??_abs,?_abs
  3275   001378  C00A  F008         	movff	??_abs+1,?_abs+1
  3276   00137C                     l917:
  3277   00137C  0012               	return		;funcret
  3278   00137E                     __end_of_abs:
  3279                           	callstack 0
  3280                           
  3281 ;; *************** function ___awmod *****************
  3282 ;; Defined at:
  3283 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awmod.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;  dividend        2    0[COMRAM] int 
  3286 ;;  divisor         2    2[COMRAM] int 
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;  sign            1    5[COMRAM] unsigned char 
  3289 ;;  counter         1    4[COMRAM] unsigned char 
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  2    0[COMRAM] int 
  3292 ;; Registers used:
  3293 ;;		wreg, status,2, status,0
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3299 ;;      Params:         4       0       0       0       0       0       0
  3300 ;;      Locals:         2       0       0       0       0       0       0
  3301 ;;      Temps:          0       0       0       0       0       0       0
  3302 ;;      Totals:         6       0       0       0       0       0       0
  3303 ;;Total ram usage:        6 bytes
  3304 ;; Hardware stack levels used: 1
  3305 ;; Hardware stack levels required when called: 1
  3306 ;; This function calls:
  3307 ;;		Nothing
  3308 ;; This function is called by:
  3309 ;;		_vfpfcnvrt
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text12
  3314   000F12                     __ptext12:
  3315                           	callstack 0
  3316   000F12                     ___awmod:
  3317                           	callstack 25
  3318   000F12  6A06               	clrf	___awmod@sign^0,c
  3319   000F14  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  3320   000F16  EF91  F007         	goto	u790
  3321   000F1A  EF8F  F007         	goto	u791
  3322   000F1E                     u791:
  3323   000F1E  EF97  F007         	goto	l1510
  3324   000F22                     u790:
  3325   000F22  6C01               	negf	___awmod@dividend^0,c
  3326   000F24  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3327   000F26  B0D8               	btfsc	status,0,c
  3328   000F28  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3329   000F2A  0E01               	movlw	1
  3330   000F2C  6E06               	movwf	___awmod@sign^0,c
  3331   000F2E                     l1510:
  3332   000F2E  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  3333   000F30  EF9E  F007         	goto	u800
  3334   000F34  EF9C  F007         	goto	u801
  3335   000F38                     u801:
  3336   000F38  EFA2  F007         	goto	l1514
  3337   000F3C                     u800:
  3338   000F3C  6C03               	negf	___awmod@divisor^0,c
  3339   000F3E  1E04               	comf	(___awmod@divisor+1)^0,f,c
  3340   000F40  B0D8               	btfsc	status,0,c
  3341   000F42  2A04               	incf	(___awmod@divisor+1)^0,f,c
  3342   000F44                     l1514:
  3343   000F44  5003               	movf	___awmod@divisor^0,w,c
  3344   000F46  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  3345   000F48  B4D8               	btfsc	status,2,c
  3346   000F4A  EFA9  F007         	goto	u811
  3347   000F4E  EFAB  F007         	goto	u810
  3348   000F52                     u811:
  3349   000F52  EFCF  F007         	goto	l1530
  3350   000F56                     u810:
  3351   000F56  0E01               	movlw	1
  3352   000F58  6E05               	movwf	___awmod@counter^0,c
  3353   000F5A  EFB3  F007         	goto	l1520
  3354   000F5E                     l1518:
  3355   000F5E  90D8               	bcf	status,0,c
  3356   000F60  3603               	rlcf	___awmod@divisor^0,f,c
  3357   000F62  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  3358   000F64  2A05               	incf	___awmod@counter^0,f,c
  3359   000F66                     l1520:
  3360   000F66  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  3361   000F68  EFB8  F007         	goto	u821
  3362   000F6C  EFBA  F007         	goto	u820
  3363   000F70                     u821:
  3364   000F70  EFAF  F007         	goto	l1518
  3365   000F74                     u820:
  3366   000F74                     l1522:
  3367   000F74  5003               	movf	___awmod@divisor^0,w,c
  3368   000F76  5C01               	subwf	___awmod@dividend^0,w,c
  3369   000F78  5004               	movf	(___awmod@divisor+1)^0,w,c
  3370   000F7A  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  3371   000F7C  A0D8               	btfss	status,0,c
  3372   000F7E  EFC3  F007         	goto	u831
  3373   000F82  EFC5  F007         	goto	u830
  3374   000F86                     u831:
  3375   000F86  EFC9  F007         	goto	l1526
  3376   000F8A                     u830:
  3377   000F8A  5003               	movf	___awmod@divisor^0,w,c
  3378   000F8C  5E01               	subwf	___awmod@dividend^0,f,c
  3379   000F8E  5004               	movf	(___awmod@divisor+1)^0,w,c
  3380   000F90  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  3381   000F92                     l1526:
  3382   000F92  90D8               	bcf	status,0,c
  3383   000F94  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  3384   000F96  3203               	rrcf	___awmod@divisor^0,f,c
  3385   000F98  2E05               	decfsz	___awmod@counter^0,f,c
  3386   000F9A  EFBA  F007         	goto	l1522
  3387   000F9E                     l1530:
  3388   000F9E  5006               	movf	___awmod@sign^0,w,c
  3389   000FA0  B4D8               	btfsc	status,2,c
  3390   000FA2  EFD5  F007         	goto	u841
  3391   000FA6  EFD7  F007         	goto	u840
  3392   000FAA                     u841:
  3393   000FAA  EFDB  F007         	goto	l1534
  3394   000FAE                     u840:
  3395   000FAE  6C01               	negf	___awmod@dividend^0,c
  3396   000FB0  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3397   000FB2  B0D8               	btfsc	status,0,c
  3398   000FB4  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3399   000FB6                     l1534:
  3400   000FB6  C001  F001         	movff	___awmod@dividend,?___awmod
  3401   000FBA  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3402   000FBE  0012               	return		;funcret
  3403   000FC0                     __end_of___awmod:
  3404                           	callstack 0
  3405                           
  3406 ;; *************** function ___awdiv *****************
  3407 ;; Defined at:
  3408 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;  dividend        2    0[COMRAM] int 
  3411 ;;  divisor         2    2[COMRAM] int 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  quotient        2    6[COMRAM] int 
  3414 ;;  sign            1    5[COMRAM] unsigned char 
  3415 ;;  counter         1    4[COMRAM] unsigned char 
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  2    0[COMRAM] int 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, status,0
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3425 ;;      Params:         4       0       0       0       0       0       0
  3426 ;;      Locals:         4       0       0       0       0       0       0
  3427 ;;      Temps:          0       0       0       0       0       0       0
  3428 ;;      Totals:         8       0       0       0       0       0       0
  3429 ;;Total ram usage:        8 bytes
  3430 ;; Hardware stack levels used: 1
  3431 ;; Hardware stack levels required when called: 1
  3432 ;; This function calls:
  3433 ;;		Nothing
  3434 ;; This function is called by:
  3435 ;;		_vfpfcnvrt
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           	psect	text13
  3440   000DA2                     __ptext13:
  3441                           	callstack 0
  3442   000DA2                     ___awdiv:
  3443                           	callstack 25
  3444   000DA2  6A06               	clrf	___awdiv@sign^0,c
  3445   000DA4  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  3446   000DA6  EFD9  F006         	goto	u730
  3447   000DAA  EFD7  F006         	goto	u731
  3448   000DAE                     u731:
  3449   000DAE  EFDF  F006         	goto	l1466
  3450   000DB2                     u730:
  3451   000DB2  6C03               	negf	___awdiv@divisor^0,c
  3452   000DB4  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  3453   000DB6  B0D8               	btfsc	status,0,c
  3454   000DB8  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  3455   000DBA  0E01               	movlw	1
  3456   000DBC  6E06               	movwf	___awdiv@sign^0,c
  3457   000DBE                     l1466:
  3458   000DBE  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  3459   000DC0  EFE6  F006         	goto	u740
  3460   000DC4  EFE4  F006         	goto	u741
  3461   000DC8                     u741:
  3462   000DC8  EFEC  F006         	goto	l1472
  3463   000DCC                     u740:
  3464   000DCC  6C01               	negf	___awdiv@dividend^0,c
  3465   000DCE  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  3466   000DD0  B0D8               	btfsc	status,0,c
  3467   000DD2  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  3468   000DD4  0E01               	movlw	1
  3469   000DD6  1A06               	xorwf	___awdiv@sign^0,f,c
  3470   000DD8                     l1472:
  3471   000DD8  0E00               	movlw	0
  3472   000DDA  6E08               	movwf	(___awdiv@quotient+1)^0,c
  3473   000DDC  0E00               	movlw	0
  3474   000DDE  6E07               	movwf	___awdiv@quotient^0,c
  3475   000DE0  5003               	movf	___awdiv@divisor^0,w,c
  3476   000DE2  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  3477   000DE4  B4D8               	btfsc	status,2,c
  3478   000DE6  EFF7  F006         	goto	u751
  3479   000DEA  EFF9  F006         	goto	u750
  3480   000DEE                     u751:
  3481   000DEE  EF21  F007         	goto	l1494
  3482   000DF2                     u750:
  3483   000DF2  0E01               	movlw	1
  3484   000DF4  6E05               	movwf	___awdiv@counter^0,c
  3485   000DF6  EF01  F007         	goto	l1480
  3486   000DFA                     l1478:
  3487   000DFA  90D8               	bcf	status,0,c
  3488   000DFC  3603               	rlcf	___awdiv@divisor^0,f,c
  3489   000DFE  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  3490   000E00  2A05               	incf	___awdiv@counter^0,f,c
  3491   000E02                     l1480:
  3492   000E02  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  3493   000E04  EF06  F007         	goto	u761
  3494   000E08  EF08  F007         	goto	u760
  3495   000E0C                     u761:
  3496   000E0C  EFFD  F006         	goto	l1478
  3497   000E10                     u760:
  3498   000E10                     l1482:
  3499   000E10  90D8               	bcf	status,0,c
  3500   000E12  3607               	rlcf	___awdiv@quotient^0,f,c
  3501   000E14  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  3502   000E16  5003               	movf	___awdiv@divisor^0,w,c
  3503   000E18  5C01               	subwf	___awdiv@dividend^0,w,c
  3504   000E1A  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3505   000E1C  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  3506   000E1E  A0D8               	btfss	status,0,c
  3507   000E20  EF14  F007         	goto	u771
  3508   000E24  EF16  F007         	goto	u770
  3509   000E28                     u771:
  3510   000E28  EF1B  F007         	goto	l1490
  3511   000E2C                     u770:
  3512   000E2C  5003               	movf	___awdiv@divisor^0,w,c
  3513   000E2E  5E01               	subwf	___awdiv@dividend^0,f,c
  3514   000E30  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3515   000E32  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  3516   000E34  8007               	bsf	___awdiv@quotient^0,0,c
  3517   000E36                     l1490:
  3518   000E36  90D8               	bcf	status,0,c
  3519   000E38  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  3520   000E3A  3203               	rrcf	___awdiv@divisor^0,f,c
  3521   000E3C  2E05               	decfsz	___awdiv@counter^0,f,c
  3522   000E3E  EF08  F007         	goto	l1482
  3523   000E42                     l1494:
  3524   000E42  5006               	movf	___awdiv@sign^0,w,c
  3525   000E44  B4D8               	btfsc	status,2,c
  3526   000E46  EF27  F007         	goto	u781
  3527   000E4A  EF29  F007         	goto	u780
  3528   000E4E                     u781:
  3529   000E4E  EF2D  F007         	goto	l1498
  3530   000E52                     u780:
  3531   000E52  6C07               	negf	___awdiv@quotient^0,c
  3532   000E54  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  3533   000E56  B0D8               	btfsc	status,0,c
  3534   000E58  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  3535   000E5A                     l1498:
  3536   000E5A  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3537   000E5E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3538   000E62  0012               	return		;funcret
  3539   000E64                     __end_of___awdiv:
  3540                           	callstack 0
  3541                           
  3542 ;; *************** function _LCD_String *****************
  3543 ;; Defined at:
  3544 ;;		line 76 in file "lcd.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;  str             2    4[COMRAM] PTR const unsigned char 
  3547 ;;		 -> STR_15(25), draw_edit@buf(20), STR_13(10), STR_12(3), 
  3548 ;;		 -> STR_11(10), STR_10(19), STR_9(18), STR_7(10), 
  3549 ;;		 -> STR_5(13), STR_3(10), STR_1(14), 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;		None
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      void 
  3554 ;; Registers used:
  3555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3561 ;;      Params:         2       0       0       0       0       0       0
  3562 ;;      Locals:         0       0       0       0       0       0       0
  3563 ;;      Temps:          0       0       0       0       0       0       0
  3564 ;;      Totals:         2       0       0       0       0       0       0
  3565 ;;Total ram usage:        2 bytes
  3566 ;; Hardware stack levels used: 1
  3567 ;; Hardware stack levels required when called: 3
  3568 ;; This function calls:
  3569 ;;		_LCD_Data
  3570 ;; This function is called by:
  3571 ;;		_draw_idle
  3572 ;;		_draw_menu
  3573 ;;		_draw_edit
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           	psect	text14
  3578   00118E                     __ptext14:
  3579                           	callstack 0
  3580   00118E                     _LCD_String:
  3581                           	callstack 26
  3582   00118E                     
  3583                           ;lcd.c: 77:     while (*str) {
  3584   00118E  EFDD  F008         	goto	l1686
  3585   001192                     l1682:
  3586                           
  3587                           ;lcd.c: 78:         LCD_Data(*str++);
  3588   001192  C005  FFF6         	movff	LCD_String@str,tblptrl
  3589   001196  C006  FFF7         	movff	LCD_String@str+1,tblptrh
  3590   00119A  6AF8               	clrf	tblptru,c
  3591   00119C  0E05               	movlw	(high __ramtop+-1)
  3592   00119E  64F7               	cpfsgt	tblptrh,c
  3593   0011A0  D003               	bra	u1107
  3594   0011A2  0008               	tblrd		*
  3595   0011A4  50F5               	movf	tablat,w,c
  3596   0011A6  D005               	bra	u1100
  3597   0011A8                     u1107:
  3598   0011A8  CFF6 FFE1          	movff	tblptrl,fsr1l
  3599   0011AC  CFF7 FFE2          	movff	tblptrh,fsr1h
  3600   0011B0  50E7               	movf	indf1,w,c
  3601   0011B2                     u1100:
  3602   0011B2  ECE7  F009         	call	_LCD_Data
  3603   0011B6  4A05               	infsnz	LCD_String@str^0,f,c
  3604   0011B8  2A06               	incf	(LCD_String@str+1)^0,f,c
  3605   0011BA                     l1686:
  3606                           
  3607                           ;lcd.c: 77:     while (*str) {
  3608   0011BA  C005  FFF6         	movff	LCD_String@str,tblptrl
  3609   0011BE  C006  FFF7         	movff	LCD_String@str+1,tblptrh
  3610   0011C2  6AF8               	clrf	tblptru,c
  3611   0011C4  0E05               	movlw	(high __ramtop+-1)
  3612   0011C6  64F7               	cpfsgt	tblptrh,c
  3613   0011C8  D003               	bra	u1117
  3614   0011CA  0008               	tblrd		*
  3615   0011CC  50F5               	movf	tablat,w,c
  3616   0011CE  D005               	bra	u1110
  3617   0011D0                     u1117:
  3618   0011D0  CFF6 FFE1          	movff	tblptrl,fsr1l
  3619   0011D4  CFF7 FFE2          	movff	tblptrh,fsr1h
  3620   0011D8  50E7               	movf	indf1,w,c
  3621   0011DA                     u1110:
  3622   0011DA  0900               	iorlw	0
  3623   0011DC  A4D8               	btfss	status,2,c
  3624   0011DE  EFF3  F008         	goto	u1121
  3625   0011E2  EFF5  F008         	goto	u1120
  3626   0011E6                     u1121:
  3627   0011E6  EFC9  F008         	goto	l1682
  3628   0011EA                     u1120:
  3629   0011EA  0012               	return		;funcret
  3630   0011EC                     __end_of_LCD_String:
  3631                           	callstack 0
  3632                           
  3633 ;; *************** function _LCD_Data *****************
  3634 ;; Defined at:
  3635 ;;		line 32 in file "lcd.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;  data            1    wreg     unsigned char 
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;  data            1    3[COMRAM] unsigned char 
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  1    wreg      void 
  3642 ;; Registers used:
  3643 ;;		wreg, status,2, status,0, cstack
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3649 ;;      Params:         0       0       0       0       0       0       0
  3650 ;;      Locals:         1       0       0       0       0       0       0
  3651 ;;      Temps:          0       0       0       0       0       0       0
  3652 ;;      Totals:         1       0       0       0       0       0       0
  3653 ;;Total ram usage:        1 bytes
  3654 ;; Hardware stack levels used: 1
  3655 ;; Hardware stack levels required when called: 2
  3656 ;; This function calls:
  3657 ;;		_LCD_SendNibble
  3658 ;; This function is called by:
  3659 ;;		_LCD_String
  3660 ;;		_draw_menu
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           	psect	text15
  3665   0013CE                     __ptext15:
  3666                           	callstack 0
  3667   0013CE                     _LCD_Data:
  3668                           	callstack 26
  3669                           
  3670                           ;incstack = 0
  3671                           ;LCD_Data@data stored from wreg
  3672   0013CE  6E04               	movwf	LCD_Data@data^0,c
  3673   0013D0                     
  3674                           ;lcd.c: 33:     LCD_SendNibble(data >> 4, 1);
  3675   0013D0  0E01               	movlw	1
  3676   0013D2  6E01               	movwf	LCD_SendNibble@rs^0,c
  3677   0013D4  3804               	swapf	LCD_Data@data^0,w,c
  3678   0013D6  0B0F               	andlw	15
  3679   0013D8  ECBF  F009         	call	_LCD_SendNibble
  3680                           
  3681                           ;lcd.c: 34:     LCD_SendNibble(data & 0x0F, 1);
  3682   0013DC  0E01               	movlw	1
  3683   0013DE  6E01               	movwf	LCD_SendNibble@rs^0,c
  3684   0013E0  5004               	movf	LCD_Data@data^0,w,c
  3685   0013E2  0B0F               	andlw	15
  3686   0013E4  ECBF  F009         	call	_LCD_SendNibble
  3687   0013E8  0012               	return		;funcret
  3688   0013EA                     __end_of_LCD_Data:
  3689                           	callstack 0
  3690                           
  3691 ;; *************** function _LCD_SetCursor *****************
  3692 ;; Defined at:
  3693 ;;		line 62 in file "lcd.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;  row             1    wreg     unsigned char 
  3696 ;;  col             1    4[COMRAM] unsigned char 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  row             1    5[COMRAM] unsigned char 
  3699 ;;  addr            1    6[COMRAM] unsigned char 
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  1    wreg      void 
  3702 ;; Registers used:
  3703 ;;		wreg, status,2, status,0, cstack
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : 0/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3709 ;;      Params:         1       0       0       0       0       0       0
  3710 ;;      Locals:         2       0       0       0       0       0       0
  3711 ;;      Temps:          0       0       0       0       0       0       0
  3712 ;;      Totals:         3       0       0       0       0       0       0
  3713 ;;Total ram usage:        3 bytes
  3714 ;; Hardware stack levels used: 1
  3715 ;; Hardware stack levels required when called: 3
  3716 ;; This function calls:
  3717 ;;		_LCD_Command
  3718 ;; This function is called by:
  3719 ;;		_draw_idle
  3720 ;;		_draw_menu
  3721 ;;		_draw_edit
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	text16
  3726   001244                     __ptext16:
  3727                           	callstack 0
  3728   001244                     _LCD_SetCursor:
  3729                           	callstack 26
  3730                           
  3731                           ;incstack = 0
  3732                           ;LCD_SetCursor@row stored from wreg
  3733   001244  6E06               	movwf	LCD_SetCursor@row^0,c
  3734   001246                     
  3735                           ;lcd.c: 63:     unsigned char addr;;lcd.c: 64:     switch (row) {
  3736   001246  EF34  F009         	goto	l1674
  3737   00124A                     l65:
  3738   00124A  6A07               	clrf	LCD_SetCursor@addr^0,c
  3739   00124C  EF47  F009         	goto	l1676
  3740   001250                     l1668:
  3741   001250  0E40               	movlw	64
  3742   001252  6E07               	movwf	LCD_SetCursor@addr^0,c
  3743   001254  EF47  F009         	goto	l1676
  3744   001258                     l1670:
  3745   001258  0E14               	movlw	20
  3746   00125A  6E07               	movwf	LCD_SetCursor@addr^0,c
  3747   00125C  EF47  F009         	goto	l1676
  3748   001260                     l1672:
  3749   001260  0E54               	movlw	84
  3750   001262  6E07               	movwf	LCD_SetCursor@addr^0,c
  3751   001264  EF47  F009         	goto	l1676
  3752   001268                     l1674:
  3753   001268  5006               	movf	LCD_SetCursor@row^0,w,c
  3754                           
  3755                           ; Switch size 1, requested type "simple"
  3756                           ; Number of cases is 4, Range of values is 0 to 3
  3757                           ; switch strategies available:
  3758                           ; Name         Instructions Cycles
  3759                           ; simple_byte           13     7 (average)
  3760                           ;	Chosen strategy is simple_byte
  3761   00126A  0A00               	xorlw	0	; case 0
  3762   00126C  B4D8               	btfsc	status,2,c
  3763   00126E  EF25  F009         	goto	l65
  3764   001272  0A01               	xorlw	1	; case 1
  3765   001274  B4D8               	btfsc	status,2,c
  3766   001276  EF28  F009         	goto	l1668
  3767   00127A  0A03               	xorlw	3	; case 2
  3768   00127C  B4D8               	btfsc	status,2,c
  3769   00127E  EF2C  F009         	goto	l1670
  3770   001282  0A01               	xorlw	1	; case 3
  3771   001284  B4D8               	btfsc	status,2,c
  3772   001286  EF30  F009         	goto	l1672
  3773   00128A  EF25  F009         	goto	l65
  3774   00128E                     l1676:
  3775                           
  3776                           ;lcd.c: 71:     addr += col;
  3777   00128E  5005               	movf	LCD_SetCursor@col^0,w,c
  3778   001290  2607               	addwf	LCD_SetCursor@addr^0,f,c
  3779   001292                     
  3780                           ;lcd.c: 72:     LCD_Command(0x80 | addr);
  3781   001292  5007               	movf	LCD_SetCursor@addr^0,w,c
  3782   001294  0980               	iorlw	128
  3783   001296  ECF5  F009         	call	_LCD_Command
  3784   00129A  0012               	return		;funcret
  3785   00129C                     __end_of_LCD_SetCursor:
  3786                           	callstack 0
  3787                           
  3788 ;; *************** function _LCD_Clear *****************
  3789 ;; Defined at:
  3790 ;;		line 56 in file "lcd.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;		None
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;		None
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      void 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3804 ;;      Params:         0       0       0       0       0       0       0
  3805 ;;      Locals:         0       0       0       0       0       0       0
  3806 ;;      Temps:          1       0       0       0       0       0       0
  3807 ;;      Totals:         1       0       0       0       0       0       0
  3808 ;;Total ram usage:        1 bytes
  3809 ;; Hardware stack levels used: 1
  3810 ;; Hardware stack levels required when called: 3
  3811 ;; This function calls:
  3812 ;;		_LCD_Command
  3813 ;; This function is called by:
  3814 ;;		_draw_idle
  3815 ;;		_draw_menu
  3816 ;;		_draw_edit
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           	psect	text17
  3821   001406                     __ptext17:
  3822                           	callstack 0
  3823   001406                     _LCD_Clear:
  3824                           	callstack 26
  3825   001406                     
  3826                           ;lcd.c: 57:     LCD_Command(0x01);
  3827   001406  0E01               	movlw	1
  3828   001408  ECF5  F009         	call	_LCD_Command
  3829   00140C                     
  3830                           ;lcd.c: 58:     _delay((unsigned long)((2)*(16000000/4000.0)));
  3831   00140C  0E0B               	movlw	11
  3832   00140E  6E05               	movwf	??_LCD_Clear^0,c
  3833   001410  0E62               	movlw	98
  3834   001412                     u1447:
  3835   001412  2EE8               	decfsz	wreg,f,c
  3836   001414  D7FE               	bra	u1447
  3837   001416  2E05               	decfsz	??_LCD_Clear^0,f,c
  3838   001418  D7FC               	bra	u1447
  3839   00141A  D000               	nop2	
  3840   00141C  0012               	return		;funcret
  3841   00141E                     __end_of_LCD_Clear:
  3842                           	callstack 0
  3843                           
  3844 ;; *************** function _LCD_Init *****************
  3845 ;; Defined at:
  3846 ;;		line 38 in file "lcd.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;		None
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;		None
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		wreg, status,2, status,0, cstack
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3860 ;;      Params:         0       0       0       0       0       0       0
  3861 ;;      Locals:         0       0       0       0       0       0       0
  3862 ;;      Temps:          1       0       0       0       0       0       0
  3863 ;;      Totals:         1       0       0       0       0       0       0
  3864 ;;Total ram usage:        1 bytes
  3865 ;; Hardware stack levels used: 1
  3866 ;; Hardware stack levels required when called: 3
  3867 ;; This function calls:
  3868 ;;		_LCD_Command
  3869 ;;		_LCD_SendNibble
  3870 ;; This function is called by:
  3871 ;;		_main
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           	psect	text18
  3876   001104                     __ptext18:
  3877                           	callstack 0
  3878   001104                     _LCD_Init:
  3879                           	callstack 27
  3880   001104                     
  3881                           ;lcd.c: 39:     _delay((unsigned long)((15)*(16000000/4000.0)));
  3882   001104  0E4E               	movlw	78
  3883   001106  6E05               	movwf	??_LCD_Init^0,c
  3884   001108  0EEB               	movlw	235
  3885   00110A                     u1457:
  3886   00110A  2EE8               	decfsz	wreg,f,c
  3887   00110C  D7FE               	bra	u1457
  3888   00110E  2E05               	decfsz	??_LCD_Init^0,f,c
  3889   001110  D7FC               	bra	u1457
  3890   001112  0000               	nop	
  3891   001114                     
  3892                           ;lcd.c: 40:     LCD_SendNibble(0x03, 0);
  3893   001114  0E00               	movlw	0
  3894   001116  6E01               	movwf	LCD_SendNibble@rs^0,c
  3895   001118  0E03               	movlw	3
  3896   00111A  ECBF  F009         	call	_LCD_SendNibble
  3897   00111E                     
  3898                           ;lcd.c: 41:     _delay((unsigned long)((5)*(16000000/4000.0)));
  3899   00111E  0E1A               	movlw	26
  3900   001120  6E05               	movwf	??_LCD_Init^0,c
  3901   001122  0EF8               	movlw	248
  3902   001124                     u1467:
  3903   001124  2EE8               	decfsz	wreg,f,c
  3904   001126  D7FE               	bra	u1467
  3905   001128  2E05               	decfsz	??_LCD_Init^0,f,c
  3906   00112A  D7FC               	bra	u1467
  3907   00112C  D000               	nop2	
  3908                           
  3909                           ;lcd.c: 42:     LCD_SendNibble(0x03, 0);
  3910   00112E  0E00               	movlw	0
  3911   001130  6E01               	movwf	LCD_SendNibble@rs^0,c
  3912   001132  0E03               	movlw	3
  3913   001134  ECBF  F009         	call	_LCD_SendNibble
  3914   001138                     
  3915                           ;lcd.c: 43:     _delay((unsigned long)((100)*(16000000/4000000.0)));
  3916   001138  0E85               	movlw	133
  3917   00113A                     u1477:
  3918   00113A  2EE8               	decfsz	wreg,f,c
  3919   00113C  D7FE               	bra	u1477
  3920   00113E  0000               	nop	
  3921   001140                     
  3922                           ;lcd.c: 44:     LCD_SendNibble(0x03, 0);
  3923   001140  0E00               	movlw	0
  3924   001142  6E01               	movwf	LCD_SendNibble@rs^0,c
  3925   001144  0E03               	movlw	3
  3926   001146  ECBF  F009         	call	_LCD_SendNibble
  3927                           
  3928                           ;lcd.c: 45:     _delay((unsigned long)((100)*(16000000/4000000.0)));
  3929   00114A  0E85               	movlw	133
  3930   00114C                     u1487:
  3931   00114C  2EE8               	decfsz	wreg,f,c
  3932   00114E  D7FE               	bra	u1487
  3933   001150  0000               	nop	
  3934   001152                     
  3935                           ;lcd.c: 46:     LCD_SendNibble(0x02, 0);
  3936   001152  0E00               	movlw	0
  3937   001154  6E01               	movwf	LCD_SendNibble@rs^0,c
  3938   001156  0E02               	movlw	2
  3939   001158  ECBF  F009         	call	_LCD_SendNibble
  3940   00115C                     
  3941                           ;lcd.c: 47:     _delay((unsigned long)((100)*(16000000/4000000.0)));
  3942   00115C  0E85               	movlw	133
  3943   00115E                     u1497:
  3944   00115E  2EE8               	decfsz	wreg,f,c
  3945   001160  D7FE               	bra	u1497
  3946   001162  0000               	nop	
  3947                           
  3948                           ;lcd.c: 48:     LCD_Command(0x28);
  3949   001164  0E28               	movlw	40
  3950   001166  ECF5  F009         	call	_LCD_Command
  3951                           
  3952                           ;lcd.c: 49:     LCD_Command(0x0C);
  3953   00116A  0E0C               	movlw	12
  3954   00116C  ECF5  F009         	call	_LCD_Command
  3955                           
  3956                           ;lcd.c: 50:     LCD_Command(0x06);
  3957   001170  0E06               	movlw	6
  3958   001172  ECF5  F009         	call	_LCD_Command
  3959                           
  3960                           ;lcd.c: 51:     LCD_Command(0x01);
  3961   001176  0E01               	movlw	1
  3962   001178  ECF5  F009         	call	_LCD_Command
  3963   00117C                     
  3964                           ;lcd.c: 52:     _delay((unsigned long)((2)*(16000000/4000.0)));
  3965   00117C  0E0B               	movlw	11
  3966   00117E  6E05               	movwf	??_LCD_Init^0,c
  3967   001180  0E62               	movlw	98
  3968   001182                     u1507:
  3969   001182  2EE8               	decfsz	wreg,f,c
  3970   001184  D7FE               	bra	u1507
  3971   001186  2E05               	decfsz	??_LCD_Init^0,f,c
  3972   001188  D7FC               	bra	u1507
  3973   00118A  D000               	nop2	
  3974   00118C  0012               	return		;funcret
  3975   00118E                     __end_of_LCD_Init:
  3976                           	callstack 0
  3977                           
  3978 ;; *************** function _LCD_Command *****************
  3979 ;; Defined at:
  3980 ;;		line 26 in file "lcd.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  cmd             1    wreg     unsigned char 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  cmd             1    3[COMRAM] unsigned char 
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2, status,0, cstack
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3994 ;;      Params:         0       0       0       0       0       0       0
  3995 ;;      Locals:         1       0       0       0       0       0       0
  3996 ;;      Temps:          0       0       0       0       0       0       0
  3997 ;;      Totals:         1       0       0       0       0       0       0
  3998 ;;Total ram usage:        1 bytes
  3999 ;; Hardware stack levels used: 1
  4000 ;; Hardware stack levels required when called: 2
  4001 ;; This function calls:
  4002 ;;		_LCD_SendNibble
  4003 ;; This function is called by:
  4004 ;;		_LCD_Init
  4005 ;;		_LCD_Clear
  4006 ;;		_LCD_SetCursor
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           	psect	text19
  4011   0013EA                     __ptext19:
  4012                           	callstack 0
  4013   0013EA                     _LCD_Command:
  4014                           	callstack 26
  4015                           
  4016                           ;incstack = 0
  4017                           ;LCD_Command@cmd stored from wreg
  4018   0013EA  6E04               	movwf	LCD_Command@cmd^0,c
  4019   0013EC                     
  4020                           ;lcd.c: 27:     LCD_SendNibble(cmd >> 4, 0);
  4021   0013EC  0E00               	movlw	0
  4022   0013EE  6E01               	movwf	LCD_SendNibble@rs^0,c
  4023   0013F0  3804               	swapf	LCD_Command@cmd^0,w,c
  4024   0013F2  0B0F               	andlw	15
  4025   0013F4  ECBF  F009         	call	_LCD_SendNibble
  4026                           
  4027                           ;lcd.c: 28:     LCD_SendNibble(cmd & 0x0F, 0);
  4028   0013F8  0E00               	movlw	0
  4029   0013FA  6E01               	movwf	LCD_SendNibble@rs^0,c
  4030   0013FC  5004               	movf	LCD_Command@cmd^0,w,c
  4031   0013FE  0B0F               	andlw	15
  4032   001400  ECBF  F009         	call	_LCD_SendNibble
  4033   001404  0012               	return		;funcret
  4034   001406                     __end_of_LCD_Command:
  4035                           	callstack 0
  4036                           
  4037 ;; *************** function _LCD_SendNibble *****************
  4038 ;; Defined at:
  4039 ;;		line 15 in file "lcd.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;  nibble          1    wreg     unsigned char 
  4042 ;;  rs              1    0[COMRAM] unsigned char 
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;  nibble          1    2[COMRAM] unsigned char 
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      void 
  4047 ;; Registers used:
  4048 ;;		wreg, status,2, status,0
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4054 ;;      Params:         1       0       0       0       0       0       0
  4055 ;;      Locals:         1       0       0       0       0       0       0
  4056 ;;      Temps:          1       0       0       0       0       0       0
  4057 ;;      Totals:         3       0       0       0       0       0       0
  4058 ;;Total ram usage:        3 bytes
  4059 ;; Hardware stack levels used: 1
  4060 ;; Hardware stack levels required when called: 1
  4061 ;; This function calls:
  4062 ;;		Nothing
  4063 ;; This function is called by:
  4064 ;;		_LCD_Command
  4065 ;;		_LCD_Data
  4066 ;;		_LCD_Init
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text20
  4071   00137E                     __ptext20:
  4072                           	callstack 0
  4073   00137E                     _LCD_SendNibble:
  4074                           	callstack 26
  4075                           
  4076                           ;incstack = 0
  4077                           ;LCD_SendNibble@nibble stored from wreg
  4078   00137E  6E03               	movwf	LCD_SendNibble@nibble^0,c
  4079   001380                     
  4080                           ;lcd.c: 16:     PORTA = (PORTA & 0xF0) | (nibble & 0x0F);
  4081   001380  C003  F002         	movff	LCD_SendNibble@nibble,??_LCD_SendNibble
  4082   001384  0E0F               	movlw	15
  4083   001386  1602               	andwf	??_LCD_SendNibble^0,f,c
  4084   001388  5080               	movf	128,w,c	;volatile
  4085   00138A  0BF0               	andlw	240
  4086   00138C  1002               	iorwf	??_LCD_SendNibble^0,w,c
  4087   00138E  6E80               	movwf	128,c	;volatile
  4088   001390                     
  4089                           ;lcd.c: 17:     PORTAbits.RA6 = rs;
  4090   001390  B001               	btfsc	LCD_SendNibble@rs^0,0,c
  4091   001392  D002               	bra	u905
  4092   001394  9C80               	bcf	128,6,c	;volatile
  4093   001396  D001               	bra	u906
  4094   001398                     u905:
  4095   001398  8C80               	bsf	128,6,c	;volatile
  4096   00139A                     u906:
  4097   00139A                     
  4098                           ;lcd.c: 18:     PORTAbits.RA5 = 0;
  4099   00139A  9A80               	bcf	128,5,c	;volatile
  4100   00139C                     
  4101                           ;lcd.c: 19:     PORTAbits.RA7 = 1;
  4102   00139C  8E80               	bsf	128,7,c	;volatile
  4103   00139E                     
  4104                           ;lcd.c: 20:     _delay((unsigned long)((1)*(16000000/4000000.0)));
  4105   00139E  D000               	nop2		;2 cycle nop
  4106   0013A0  D000               	nop2		;2 cycle nop
  4107   0013A2                     
  4108                           ;lcd.c: 21:     PORTAbits.RA7 = 0;
  4109   0013A2  9E80               	bcf	128,7,c	;volatile
  4110   0013A4                     
  4111                           ;lcd.c: 22:     _delay((unsigned long)((50)*(16000000/4000000.0)));
  4112   0013A4  0E42               	movlw	66
  4113   0013A6                     u1517:
  4114   0013A6  2EE8               	decfsz	wreg,f,c
  4115   0013A8  D7FE               	bra	u1517
  4116   0013AA  D000               	nop2	
  4117   0013AC  0012               	return		;funcret
  4118   0013AE                     __end_of_LCD_SendNibble:
  4119                           	callstack 0
  4120                           
  4121 ;; *************** function _isr *****************
  4122 ;; Defined at:
  4123 ;;		line 114 in file "main.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;		None
  4126 ;; Auto vars:     Size  Location     Type
  4127 ;;		None
  4128 ;; Return value:  Size  Location     Type
  4129 ;;                  1    wreg      void 
  4130 ;; Registers used:
  4131 ;;		wreg, status,2, status,0
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4137 ;;      Params:         0       0       0       0       0       0       0
  4138 ;;      Locals:         0       0       0       0       0       0       0
  4139 ;;      Temps:          0       0       0       0       0       0       0
  4140 ;;      Totals:         0       0       0       0       0       0       0
  4141 ;;Total ram usage:        0 bytes
  4142 ;; Hardware stack levels used: 1
  4143 ;; This function calls:
  4144 ;;		Nothing
  4145 ;; This function is called by:
  4146 ;;		Interrupt level 2
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	intcode
  4151   000008                     __pintcode:
  4152                           	callstack 0
  4153   000008                     _isr:
  4154                           	callstack 24
  4155                           
  4156                           ;incstack = 0
  4157   000008  825D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4158   00000A                     
  4159                           ;main.c: 115:                     current_state = IDLE;
  4160   00000A  A09E               	btfss	158,0,c	;volatile
  4161   00000C  EF0A  F000         	goto	i2u61_41
  4162   000010  EF0C  F000         	goto	i2u61_40
  4163   000014                     i2u61_41:
  4164   000014  EF17  F000         	goto	i2l154
  4165   000018                     i2u61_40:
  4166   000018                     
  4167                           ;main.c: 116:                     draw_idle();
  4168   000018  909E               	bcf	158,0,c	;volatile
  4169   00001A                     
  4170                           ;main.c: 118:                 break;
  4171   00001A  0EFE               	movlw	254
  4172   00001C  6ECF               	movwf	207,c	;volatile
  4173                           
  4174                           ;main.c: 119:             case EDIT:
  4175   00001E  0E0C               	movlw	12
  4176   000020  6ECE               	movwf	206,c	;volatile
  4177   000022                     
  4178                           ;main.c: 120:                 if (enc) {
  4179   000022  0E01               	movlw	1
  4180   000024  264D               	addwf	_ms_counter^0,f,c	;volatile
  4181   000026  0E00               	movlw	0
  4182   000028  224E               	addwfc	(_ms_counter+1)^0,f,c	;volatile
  4183   00002A  224F               	addwfc	(_ms_counter+2)^0,f,c	;volatile
  4184   00002C  2250               	addwfc	(_ms_counter+3)^0,f,c	;volatile
  4185   00002E                     i2l154:
  4186   00002E  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4187   000030  0011               	retfie		f
  4188   000032                     __end_of_isr:
  4189                           	callstack 0
  4190                           
  4191                           	psect	rparam
  4192   000001                     ___rparam_used  equ	1
  4193   000000                     ___param_bank   equ	0
  4194   000000                     __Lparam        equ	__Lrparam
  4195   000000                     __Hparam        equ	__Hrparam
  4196                           
  4197                           	psect	temp
  4198   00005D                     btemp:
  4199                           	callstack 0
  4200   00005D                     	ds	1
  4201   00005D                     int$flags       set	btemp
  4202   00005E                     wtemp8          set	btemp+1
  4203   00005E                     ttemp5          set	btemp+1
  4204   000061                     ttemp6          set	btemp+4
  4205   000065                     ttemp7          set	btemp+8
  4206                           
  4207                           	psect	config
  4208                           
  4209                           ; Padding undefined space
  4210   300000                     	org	3145728
  4211   300000  FF                 	db	255
  4212                           
  4213                           ;Config register CONFIG1H @ 0x300001
  4214                           ;	Oscillator Selection bits
  4215                           ;	FOSC = INTIO67, Internal oscillator block
  4216                           ;	4X PLL Enable
  4217                           ;	PLLCFG = OFF, Oscillator used directly
  4218                           ;	Primary clock enable bit
  4219                           ;	PRICLKEN = OFF, Primary clock can be disabled by software
  4220                           ;	Fail-Safe Clock Monitor Enable bit
  4221                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  4222                           ;	Internal/External Oscillator Switchover bit
  4223                           ;	IESO = OFF, Oscillator Switchover mode disabled
  4224   300001                     	org	3145729
  4225   300001  08                 	db	8
  4226                           
  4227                           ;Config register CONFIG2L @ 0x300002
  4228                           ;	Power-up Timer Enable bit
  4229                           ;	PWRTEN = OFF, Power up timer disabled
  4230                           ;	Brown-out Reset Enable bits
  4231                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  4232                           ;	Brown Out Reset Voltage bits
  4233                           ;	BORV = 190, VBOR set to 1.90 V nominal
  4234   300002                     	org	3145730
  4235   300002  1F                 	db	31
  4236                           
  4237                           ;Config register CONFIG2H @ 0x300003
  4238                           ;	Watchdog Timer Enable bits
  4239                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  4240                           ;	Watchdog Timer Postscale Select bits
  4241                           ;	WDTPS = 32768, 1:32768
  4242   300003                     	org	3145731
  4243   300003  3C                 	db	60
  4244                           
  4245                           ; Padding undefined space
  4246   300004                     	org	3145732
  4247   300004  FF                 	db	255
  4248                           
  4249                           ;Config register CONFIG3H @ 0x300005
  4250                           ;	CCP2 MUX bit
  4251                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  4252                           ;	PORTB A/D Enable bit
  4253                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  4254                           ;	P3A/CCP3 Mux bit
  4255                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  4256                           ;	HFINTOSC Fast Start-up
  4257                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  4258                           ;	Timer3 Clock input mux bit
  4259                           ;	T3CMX = PORTC0, T3CKI is on RC0
  4260                           ;	ECCP2 B output mux bit
  4261                           ;	P2BMX = 0x1, unprogrammed default
  4262                           ;	MCLR Pin Enable bit
  4263                           ;	MCLRE = INTMCLR, RE3 input pin enabled; MCLR disabled
  4264   300005                     	org	3145733
  4265   300005  3D                 	db	61
  4266                           
  4267                           ;Config register CONFIG4L @ 0x300006
  4268                           ;	Stack Full/Underflow Reset Enable bit
  4269                           ;	STVREN = ON, Stack full/underflow will cause Reset
  4270                           ;	Single-Supply ICSP Enable bit
  4271                           ;	LVP = OFF, Single-Supply ICSP disabled
  4272                           ;	Extended Instruction Set Enable bit
  4273                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  4274                           ;	Background Debug
  4275                           ;	DEBUG = 0x1, unprogrammed default
  4276   300006                     	org	3145734
  4277   300006  81                 	db	129
  4278                           
  4279                           ; Padding undefined space
  4280   300007                     	org	3145735
  4281   300007  FF                 	db	255
  4282                           
  4283                           ;Config register CONFIG5L @ 0x300008
  4284                           ;	Code Protection Block 0
  4285                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  4286                           ;	Code Protection Block 1
  4287                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  4288                           ;	Code Protection Block 2
  4289                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  4290                           ;	Code Protection Block 3
  4291                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  4292   300008                     	org	3145736
  4293   300008  0F                 	db	15
  4294                           
  4295                           ;Config register CONFIG5H @ 0x300009
  4296                           ;	Boot Block Code Protection bit
  4297                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  4298                           ;	Data EEPROM Code Protection bit
  4299                           ;	CPD = OFF, Data EEPROM not code-protected
  4300   300009                     	org	3145737
  4301   300009  C0                 	db	192
  4302                           
  4303                           ;Config register CONFIG6L @ 0x30000A
  4304                           ;	Write Protection Block 0
  4305                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  4306                           ;	Write Protection Block 1
  4307                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  4308                           ;	Write Protection Block 2
  4309                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  4310                           ;	Write Protection Block 3
  4311                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  4312   30000A                     	org	3145738
  4313   30000A  0F                 	db	15
  4314                           
  4315                           ;Config register CONFIG6H @ 0x30000B
  4316                           ;	Configuration Register Write Protection bit
  4317                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  4318                           ;	Boot Block Write Protection bit
  4319                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  4320                           ;	Data EEPROM Write Protection bit
  4321                           ;	WRTD = OFF, Data EEPROM not write-protected
  4322   30000B                     	org	3145739
  4323   30000B  E0                 	db	224
  4324                           
  4325                           ;Config register CONFIG7L @ 0x30000C
  4326                           ;	Table Read Protection Block 0
  4327                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  4328                           ;	Table Read Protection Block 1
  4329                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  4330                           ;	Table Read Protection Block 2
  4331                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  4332                           ;	Table Read Protection Block 3
  4333                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  4334   30000C                     	org	3145740
  4335   30000C  0F                 	db	15
  4336                           
  4337                           ;Config register CONFIG7H @ 0x30000D
  4338                           ;	Boot Block Table Read Protection bit
  4339                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  4340   30000D                     	org	3145741
  4341   30000D  40                 	db	64
  4342                           tosu	equ	0xFFF
  4343                           tosh	equ	0xFFE
  4344                           tosl	equ	0xFFD
  4345                           stkptr	equ	0xFFC
  4346                           pclatu	equ	0xFFB
  4347                           pclath	equ	0xFFA
  4348                           pcl	equ	0xFF9
  4349                           tblptru	equ	0xFF8
  4350                           tblptrh	equ	0xFF7
  4351                           tblptrl	equ	0xFF6
  4352                           tablat	equ	0xFF5
  4353                           prodh	equ	0xFF4
  4354                           prodl	equ	0xFF3
  4355                           indf0	equ	0xFEF
  4356                           postinc0	equ	0xFEE
  4357                           postdec0	equ	0xFED
  4358                           preinc0	equ	0xFEC
  4359                           plusw0	equ	0xFEB
  4360                           fsr0h	equ	0xFEA
  4361                           fsr0l	equ	0xFE9
  4362                           wreg	equ	0xFE8
  4363                           indf1	equ	0xFE7
  4364                           postinc1	equ	0xFE6
  4365                           postdec1	equ	0xFE5
  4366                           preinc1	equ	0xFE4
  4367                           plusw1	equ	0xFE3
  4368                           fsr1h	equ	0xFE2
  4369                           fsr1l	equ	0xFE1
  4370                           bsr	equ	0xFE0
  4371                           indf2	equ	0xFDF
  4372                           postinc2	equ	0xFDE
  4373                           postdec2	equ	0xFDD
  4374                           preinc2	equ	0xFDC
  4375                           plusw2	equ	0xFDB
  4376                           fsr2h	equ	0xFDA
  4377                           fsr2l	equ	0xFD9
  4378                           status	equ	0xFD8

Data Sizes:
    Strings     146
    Constant    0
    Data        33
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     72      92
    BANK0           160      0      64
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> draw_edit@buf(COMRAM[20]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> draw_edit@buf(COMRAM[20]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    LCD_String@str	PTR const unsigned char  size(2) Largest target is 25
		 -> draw_edit@buf(COMRAM[20]), STR_1(CODE[14]), STR_10(CODE[19]), STR_11(CODE[10]), 
		 -> STR_12(CODE[3]), STR_13(CODE[10]), STR_15(CODE[25]), STR_3(CODE[10]), 
		 -> STR_5(CODE[13]), STR_7(CODE[10]), STR_9(CODE[18]), 

    params$name	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), STR_3(CODE[10]), STR_5(CODE[13]), STR_7(CODE[10]), 

    params$unit	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_2(CODE[4]), STR_4(CODE[4]), STR_6(CODE[4]), STR_8(CODE[4]), 

    S1096$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> draw_edit@buf(COMRAM[20]), 

    S1096$source	PTR const unsigned char  size(2) Largest target is 0

    S381$name	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), STR_3(CODE[10]), STR_5(CODE[13]), STR_7(CODE[10]), 

    S381$unit	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_2(CODE[4]), STR_4(CODE[4]), STR_6(CODE[4]), STR_8(CODE[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_14(CODE[6]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> draw_edit@buf(COMRAM[20]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 6
		 -> STR_14(CODE[6]), 

    vfpfcnvrt@cp_1178	PTR unsigned char  size(2) Largest target is 4
		 -> ?_sprintf(COMRAM[2]), STR_2(CODE[4]), STR_4(CODE[4]), STR_6(CODE[4]), 
		 -> STR_8(CODE[4]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 6
		 -> STR_14(CODE[6]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_14(CODE[6]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_draw_edit
    _draw_menu->_LCD_SetCursor
    _draw_idle->_LCD_SetCursor
    _draw_edit->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _LCD_String->_LCD_Data
    _LCD_Data->_LCD_SendNibble
    _LCD_SetCursor->_LCD_Command
    _LCD_Clear->_LCD_Command
    _LCD_Init->_LCD_Command
    _LCD_Command->_LCD_SendNibble

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    4558
                                             67 COMRAM     5     5      0
                           _LCD_Init
                          _draw_edit
                          _draw_idle
                          _draw_menu
                         _get_button
                        _get_encoder
 ---------------------------------------------------------------------------------
 (1) _get_encoder                                          4     4      0     252
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _get_button                                           6     6      0     159
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _draw_menu                                            3     3      0     720
                                              7 COMRAM     3     3      0
                          _LCD_Clear
                           _LCD_Data
                      _LCD_SetCursor
                         _LCD_String
 ---------------------------------------------------------------------------------
 (1) _draw_idle                                            0     0      0     491
                          _LCD_Clear
                      _LCD_SetCursor
                         _LCD_String
 ---------------------------------------------------------------------------------
 (1) _draw_edit                                           21    21      0    2560
                                             46 COMRAM    21    21      0
                          _LCD_Clear
                      _LCD_SetCursor
                         _LCD_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             20    14      6    2019
                                             28 COMRAM    18    12      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    1816
                                             24 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           14    10      4    1683
                                             10 COMRAM    14    10      4
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     232
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2      67
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     302
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2     171
                                              4 COMRAM     2     0      2
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (3) _LCD_Data                                             1     1      0     117
                                              3 COMRAM     1     1      0
                     _LCD_SendNibble
 ---------------------------------------------------------------------------------
 (2) _LCD_SetCursor                                        3     2      1     203
                                              4 COMRAM     3     2      1
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            1     1      0     117
                                              4 COMRAM     1     1      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     176
                                              4 COMRAM     1     1      0
                        _LCD_Command
                     _LCD_SendNibble
 ---------------------------------------------------------------------------------
 (3) _LCD_Command                                          1     1      0     117
                                              3 COMRAM     1     1      0
                     _LCD_SendNibble
 ---------------------------------------------------------------------------------
 (4) _LCD_SendNibble                                       3     2      1      59
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Command
       _LCD_SendNibble
     _LCD_SendNibble
   _draw_edit
     _LCD_Clear
       _LCD_Command
     _LCD_SetCursor
       _LCD_Command
     _LCD_String
       _LCD_Data
         _LCD_SendNibble
     _sprintf
       _vfprintf
         _vfpfcnvrt
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _fputc
             _putch
   _draw_idle
     _LCD_Clear
     _LCD_SetCursor
     _LCD_String
   _draw_menu
     _LCD_Clear
     _LCD_Data
     _LCD_SetCursor
     _LCD_String
   _get_button
   _get_encoder

 _isr (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1535      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0      64     40.0%
BITBIGSFRh         126      0       0      0.0%
BITCOMRAM           94      0       0      0.0%
COMRAM              94     72      92     97.9%
BITBIGSFRl          69      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     156      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Mon Jul 21 16:20:26 2025

           ?_LCD_Command 0001                       l15 0CC2                       l40 0DA0  
                     l52 1404                       l28 0CC8                       l61 141C  
                     l71 129A                       l55 13E8                       l49 13AC  
                     l65 124A                       l58 118C                       l77 11EA  
           ___awdiv@sign 0006              ?_LCD_String 0005       get_button@duration 0002  
          _LCD_SetCursor 1244                      l145 1102                      l138 1314  
                    l412 0E62                      l148 0F10                      l172 0AEC  
                    l425 0FBE                      l910 12DA                      l914 1364  
                    l940 141E                      l917 137C                      l929 1068  
                    l859 1348                      l886 081E                      l897 099A  
                    u800 0F3C                      u801 0F38                      u730 0DB2  
                    u810 0F56                      u731 0DAE                      u811 0F52  
                    u740 0DCC                      u820 0F74                      u741 0DC8  
                    u821 0F70                      u750 0DF2                      u830 0F8A  
                    u910 06B6                      u751 0DEE                      u831 0F86  
                    u911 06B2                      u760 0E10                      u840 0FAE  
                    u920 06F4                      u905 1398                      u761 0E0C  
                    u841 0FAA                      u921 06F0                      u906 139A  
                    u770 0E2C                      u850 0FD0                      u930 0710  
                    u771 0E28                      u851 0FCC                      u931 070C  
                    u780 0E52                      u860 0FE0                      u940 0748  
                    u781 0E4E                      u861 0FDC                      u941 0742  
                    u790 0F22                      u870 1006                      u950 074A  
                    u791 0F1E                      u871 1002                      u880 1038  
                    u960 07AA                      u881 1034                      u961 07A6  
                    u890 1358                      u970 07BA                      u891 1354  
                    u971 07B6                      u980 07CA                      u981 07C6  
                    u990 07DA                      u991 07D6                      _abs 134A  
                    _isr 0008             ___awmod@sign 0006                      wreg 0FE8  
         _LCD_SendNibble 137E                     ?_abs 0007                     l1510 0F2E  
                   l1502 0F12                     l1520 0F66                     l1512 0F3C  
                   l1504 0F14                     l1600 07BA                     l1522 0F74  
                   l1530 0F9E                     l1514 0F44                     l1506 0F22  
                   l1602 07CA                     l1610 0808                     l1460 0DA4  
                   l1532 0FAE                     l1524 0F8A                     l1516 0F56  
                   l1508 0F2A                     l1540 0FD0                     l1620 0874  
                   l1612 0820                     l1604 07DA                     l1700 0BA6  
                   l1470 0DD4                     l1462 0DB2                     l1534 0FB6  
                   l1526 0F92                     l1518 0F5E                     l1542 0FE0  
                   l1630 08E6                     l1622 089E                     l1614 0842  
                   l1606 07EC                     l1710 0C06                     l1702 0BD6  
                   l1560 139A                     l1480 0E02                     l1472 0DD8  
                   l1464 0DBA                     l1528 0F98                     l1552 134A  
                   l1544 0FEA                     l1632 0904                     l1624 08C8  
                   l1616 084A                     l1608 0806                     l1800 1088  
                   l1712 0C18                     l1562 139C                     l1650 13D0  
                   l1490 0E36                     l1482 0E10                     l1474 0DE0  
                   l1466 0DBE                     l1458 0DA2                     l1554 1358  
                   l1546 1006                     l1538 0FC0                     l1634 0934  
                   l1618 0852                     l1642 0978                     l1570 0694  
                   l1810 10B2                     l1730 0C72                     l1722 0C48  
                   l1714 0C1E                     l1706 0BEE                     l1564 139E  
                   l1556 1380                     l1492 0E3C                     l1484 0E16  
                   l1476 0DF2                     l1468 0DCC                     l1548 1038  
                   l1636 0938                     l1628 08D6                     l1580 06D8  
                   l1572 06B6                     l1652 129C                     l1820 0E64  
                   l1812 10BC                     l1708 0BFE                     l1740 0C9C  
                   l1900 0A96                     l1566 13A2                     l1558 1390  
                   l1662 1406                     l1670 1258                     l1486 0E2C  
                   l1478 0DFA                     l1494 0E42                     l1638 096C  
                   l1590 0738                     l1582 06F4                     l1574 06BE  
                   l1654 12A4                     l1830 0EEC                     l1822 0E72  
                   l1814 10C2                     l1806 1090                     l1750 0CD4  
                   l1734 0C88                     l1726 0C5C                     l1718 0C34  
                   l1742 0CC6                     l1910 0B2A                     l1902 0AA6  
                   l1568 13A4                     l1648 13EC                     l1664 140C  
                   l1672 1260                     l1680 118E                     l1496 0E52  
                   l1488 0E34                     l1592 074C                     l1584 0710  
                   l1576 06CA                     l1656 12B6                     l1832 0EF6  
                   l1824 0E82                     l1816 10E2                     l1808 109A  
                   l1760 0D24                     l1752 0CE4                     l1920 0B5A  
                   l1904 0AAE                     l1912 0B2E                     l1840 09A2  
                   l1674 1268                     l1666 1246                     l1682 1192  
                   l1498 0E5A                     l1594 077C                     l1586 072A  
                   l1578 06CE                     l1658 12D2                     l1690 131E  
                   l1834 0F00                     l1826 0EA2                     l1818 10E6  
                   l1762 0D56                     l1770 0D9A                     l1754 0CF4  
                   l1746 0CCA                     l1914 0B3E                     l1906 0AD8  
                   l1850 09B2                     l1842 09A6                     l1780 1138  
                   l1668 1250                     l1676 128E                     l1684 11B6  
                   l1596 0798                     l1588 0734                     l1692 1326  
                   l1828 0EAC                     l1764 0D72                     l1756 0D04  
                   l1748 0CD2                     l1916 0B52                     l1908 0B16  
                   l1860 09C0                     l1852 09B4                     l1844 09A8  
                   l1836 099C                     l1782 1140                     l1774 1104  
                   l1678 1292                     l1686 11BA                     l1598 07AA  
                   l1694 132E                     l1790 12DC                     l1766 0D7A  
                   l1758 0D14                     l1918 0B56                     l1870 09E8  
                   l1862 09C4                     l1854 09BA                     l1846 09AA  
                   l1838 09A0                     l1784 1152                     l1776 1114  
                   l1696 133E                     l1688 1316                     l1792 12EA  
                   l1768 0D96                     l1880 0A2A                     l1872 09F4  
                   l1928 0B70                     l1864 09C8                     l1856 09BC  
                   l1848 09B0                     l1786 115C                     l1778 111E  
                   l1794 12FA                     l1890 0A76                     l1882 0A46  
                   l1874 09FC                     l1866 09CE                     l1858 09BE  
                   l1788 117C                     l1796 106A                     l1892 0A7A  
                   l1884 0A4E                     l1876 0A0C                     l1868 09D8  
                   l1798 1078                     l1966 0B84                     l1894 0A7E  
                   l1878 0A22                     l1886 0A52                     l1896 0A90  
                   l1888 0A62                     ?_isr 0001                     STR_1 063F  
                   STR_2 068C                     STR_3 0664                     STR_4 0688  
                   STR_5 064D                     STR_6 068C                     STR_7 066E  
                   STR_8 0688                     STR_9 062D                     u1000 081A  
                   u1001 0816                     u1010 0842                     u1011 083E  
                   u1100 11B2                     u1020 0874                     u1021 0870  
                   u1110 11DA                     u1030 089E                     u1031 089A  
                   u1120 11EA                     u1040 08C8                     u1200 0C58  
                   u1121 11E6                     u1041 08C4                     u1201 0C54  
                   u1050 08E6                     u1210 0C6E                     u1130 0BB8  
                   u1107 11A8                     u1051 08E2                     u1211 0C6A  
                   u1131 0BB0                     u1060 0924                     u1300 0D96  
                   u1220 0C84                     u1140 0BCC                     u1117 11D0  
                   u1301 0D92                     u1221 0C80                     u1141 0BC4  
                   u1070 0958                     u1310 10B2                     u1230 0C98  
                   u1150 0BEA                     u1311 10AE                     u1231 0C94  
                   u1151 0BE6                     u1080 0968                     u1320 1102  
                   u1240 0CE4                     u1160 0BFE                     u1400 0AD8  
                   u1081 0964                     u1321 10FE                     u1241 0CE0  
                   u1161 0BFA                     u1401 0AD4                     u1090 12D2  
                   u1250 0CF4                     u1170 0C18                     u1138 0BBA  
                   u1410 0B16                     u1330 09E8                     u1067 091A  
                   u1091 12CE                     u1251 0CF0                     u1171 0C14  
                   u1411 0B12                     u1331 09E4                     u1260 0D14  
                   u1180 0C30                     u1148 0BCE                     u1420 0B3E  
                   u1340 0A0C                     u1077 094E                     u1261 0D10  
                   u1181 0C2C                     u1421 0B3A                     u1341 0A08  
                   u1270 0D24                     u1190 0C44                     u1430 0B6C  
                   u1350 0A22                     u1271 0D20                     u1191 0C40  
                   u1431 0B68                     u1351 0A1E                     u1280 0D56  
                   u1360 0A46                     u1281 0D52                     u1361 0A42  
                   u1290 0D72                     u1370 0A62                     u1507 1182  
                   u1291 0D6E                     u1371 0A5E                     u1380 0A90  
                   u1517 13A6                     u1381 0A8C                     u1390 0AA6  
                   u1447 1412                     u1391 0AA2                     u1457 110A  
                   u1467 1124                     u1477 113A                     u1487 114C  
                   u1497 115E                     abs@a 0007                     _dbuf 0060  
                   _main 099C                     _prec 0053                     fsr1h 0FE2  
                   fsr2h 0FDA                     indf1 0FE7                     indf2 0FDF  
                   fsr1l 0FE1                     fsr2l 0FD9                     btemp 005D  
                   prodl 0FF3                     start 0032             ___param_bank 0000  
                  ??_abs 0009                    ??_isr 0001         __end_of_LCD_Data 13EA  
       __end_of_LCD_Init 118E             LCD_Data@data 0004           ?_LCD_SetCursor 0005  
                  ?_main 0001          __end_of___awdiv 0E64                    STR_10 061A  
                  STR_11 0678                    STR_12 0690                    STR_13 065A  
                  STR_14 0682                    STR_15 0601          __end_of___awmod 0FC0  
        ___awdiv@divisor 0003                    _T1CON 0FCD                    i2l154 002E  
 __end_of_LCD_SendNibble 13AE          ___awdiv@counter 0005             vfpfcnvrt@fmt 000C  
                  _TMR1H 0FCF                    _TMR1L 0FCE                    _PORTA 0F80  
                  _PORTB 0F81                    _TRISA 0F92                    _TRISB 0F93  
                  _flags 0059                    _fputc 0FC0                    _width 0051  
           draw_edit@buf 0030                    _putch 141E                    tablat 0FF5  
                  ttemp5 005E                    ttemp6 0061                    ttemp7 0065  
                  status 0FD8                    wtemp8 005E          __end_of_sprintf 134A  
          get_button@res 0001          __initialization 11EC             __end_of_main 0BA6  
         get_encoder@dir 0003                   ??_main 0044        __end_of_LCD_Clear 141E  
          __activetblptr 0002          ?_LCD_SendNibble 0001     get_button@start_time 0049  
                 ?_fputc 0001         ___awdiv@dividend 0001                   _ANSELA 0F38  
                 ?_putch 0001                   _ANSELB 0F39                   _ANSELC 0F3A  
                 i2l1320 000A                   i2l1322 0018                   i2l1324 001A  
                 i2l1326 0022                   _OSCCON 0FD3            vfpfcnvrt@done 0012  
           vfprintf@cfmt 001C                ??___awdiv 0005                ??___awmod 0005  
        ??_LCD_SetCursor 0006                   _params 0080                   clear_0 1224  
                 clear_1 1230         ___awdiv@quotient 0007          ___awmod@divisor 0003  
                 isa$std 0001          ___awmod@counter 0005                   fputc@c 0001  
           __pdataCOMRAM 005C             __mediumconst 0600                   tblptrh 0FF7  
                 tblptrl 0FF6                   tblptru 0FF8                   putch@c 0001  
       __end_of_vfprintf 12DC                ??_sprintf 0023                ?_LCD_Data 0001  
             __accesstop 0060           get_button@last 005C  __end_of__initialization 1236  
         get_button@curr 0006                ?_LCD_Init 0001            ___rparam_used 0001  
         __pcstackCOMRAM 0001             __pidataBANK0 13AE            __end_of_fputc 106A  
          __end_of_putch 1420             ??_LCD_String 0007                  ??_fputc 0004  
                ??_putch 0001               __pbssBANK0 0060            _current_index 0057  
          _current_state 005A               ??_LCD_Data 0004               ??_LCD_Init 0005  
     __end_of_LCD_String 11EC    get_encoder@last_state 005B               _get_button 0CCA  
                i2u61_40 0018                  i2u61_41 0014            LCD_String@str 0005  
                __Hparam 0000                  __Lparam 0000        __end_of_draw_edit 0F12  
                ___awdiv 0DA2        __end_of_draw_idle 1316                  ___awmod 0F12  
      __end_of_draw_menu 1104                ?_vfprintf 0019         ??_LCD_SendNibble 0002  
           __psmallconst 0600                  __pcinit 11EC                  __ramtop 0600  
                __ptext0 099C                  __ptext1 0BA6                  __ptext2 0CCA  
                __ptext3 106A                  __ptext4 12DC                  __ptext5 0E64  
                __ptext6 1316                  __ptext7 129C                  __ptext8 0694  
                __ptext9 0FC0         LCD_SendNibble@rs 0001       get_encoder@current 0004  
       ___awmod@dividend 0001                _LCD_Clear 1406                  main@enc 0047  
                main@btn 0048                  _sprintf 1316               _ms_counter 004D  
   end_of_initialization 1236         LCD_SetCursor@col 0005         LCD_SetCursor@row 0006  
                fputc@fp 0003           LCD_Command@cmd 0004            __Lmediumconst 0000  
       vfpfcnvrt@cp_1178 0010        __end_of_vfpfcnvrt 099C                  postdec1 0FE5  
                postdec2 0FDD                  postinc0 0FEE                  postinc1 0FE6  
                postinc2 0FDE         vfpfcnvrt@convarg 0014               _temp_value 0055  
             ??_vfprintf 001C                _PORTAbits 0F80                _PORTBbits 0F81  
            ?_get_button 0001               ?_LCD_Clear 0001            ??_get_encoder 0001  
             draw_menu@i 0009            ??_LCD_Command 0004              vfpfcnvrt@ap 000D  
            vfpfcnvrt@cp 0013              vfpfcnvrt@fp 000B    __end_of_LCD_SetCursor 129C  
          __pidataCOMRAM 1420      start_initialization 11EC              __end_of_abs 137E  
            __end_of_isr 0032              vfprintf@fmt 001A      __end_of_get_encoder 0CCA  
            __pdataBANK0 0080      __end_of_LCD_Command 1406              __pbssCOMRAM 0049  
            ??_LCD_Clear 0005                __pintcode 0008                 ?___awdiv 0001  
               ?___awmod 0001                _draw_edit 0E64                _draw_idle 12DC  
              _draw_menu 106A              __smallconst 0600                 ?_sprintf 001D  
   LCD_SendNibble@nibble 0003                 _LCD_Data 13CE                 _LCD_Init 1104  
               _PIE1bits 0F9D              _get_encoder 0BA6                 _PIR1bits 0F9E  
            _LCD_Command 13EA                _vfpfcnvrt 0694               ?_draw_edit 0001  
             ?_draw_idle 0001               ?_draw_menu 0001             ??_get_button 0001  
             vfpfcnvrt@c 0018              _INTCON2bits 0FF1                copy_data0 1200  
               __Hrparam 0000               vfprintf@ap 001B                 __Lrparam 0000  
             vfprintf@fp 0019       __end_of_get_button 0DA2               ?_vfpfcnvrt 000B  
             sprintf@fmt 001E                 __ptext10 141E                 __ptext11 134A  
               __ptext20 137E                 __ptext12 0F12                 __ptext13 0DA2  
               __ptext14 118E                 __ptext15 13CE                 __ptext16 1244  
               __ptext17 1406                 __ptext18 1104                 __ptext19 13EA  
               isa$xinst 0000                 int$flags 005D                 _vfprintf 129C  
             _LCD_String 118E              ??_draw_edit 002F              ??_draw_idle 0008  
            ??_draw_menu 0008              _OSCTUNEbits 0F9B               _INTCONbits 0FF2  
      LCD_SetCursor@addr 0007                 intlevel2 0000                sprintf@ap 0023  
            ??_vfpfcnvrt 000F                 sprintf@f 0024                 sprintf@s 001D  
           ?_get_encoder 0001  
